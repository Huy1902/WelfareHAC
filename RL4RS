{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "66753428",
   "metadata": {
    "id": "36GFFPEquVlH",
    "papermill": {
     "duration": 0.007721,
     "end_time": "2025-07-10T11:38:13.155838",
     "exception": false,
     "start_time": "2025-07-10T11:38:13.148117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Setup\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "63004b1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:38:13.170732Z",
     "iopub.status.busy": "2025-07-10T11:38:13.170492Z",
     "iopub.status.idle": "2025-07-10T11:38:16.044325Z",
     "shell.execute_reply": "2025-07-10T11:38:16.043262Z"
    },
    "papermill": {
     "duration": 2.883746,
     "end_time": "2025-07-10T11:38:16.046294",
     "exception": false,
     "start_time": "2025-07-10T11:38:13.162548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\r\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: W&B API key is configured. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\r\n"
     ]
    }
   ],
   "source": [
    "!wandb login --relogin c2aabf528c3a17ca15b2306fdef1f0f0d24798bf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8e43184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:38:16.064987Z",
     "iopub.status.busy": "2025-07-10T11:38:16.064261Z",
     "iopub.status.idle": "2025-07-10T11:38:23.329040Z",
     "shell.execute_reply": "2025-07-10T11:38:23.327928Z"
    },
    "id": "lJ3KHm7bdEpB",
    "outputId": "e85fb76f-ac93-4310-ed56-b532d2b2cbc9",
    "papermill": {
     "duration": 7.274472,
     "end_time": "2025-07-10T11:38:23.330813",
     "exception": false,
     "start_time": "2025-07-10T11:38:16.056341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/hac-rl4rs/item_info.csv\n",
      "/kaggle/input/hac-rl4rs/all.csv\n",
      "/kaggle/input/hac-rl4rs/train.csv\n",
      "/kaggle/input/hac-rl4rs/test.csv\n",
      "/kaggle/input/hac/pytorch/default/1/model_actor\n",
      "/kaggle/input/hac/pytorch/default/1/model_actor_optimizer\n",
      "/kaggle/input/hac/pytorch/default/1/model_critic_optimizer\n",
      "/kaggle/input/hac/pytorch/default/1/model_critic\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "import os\n",
    "import random\n",
    "import wandb\n",
    "from tqdm import tqdm\n",
    "import torch.utils.data as data\n",
    "from torch.utils.data import Dataset\n",
    "import torch.nn as nn\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from torch.utils.data import DataLoader\n",
    "from time import time\n",
    "import copy\n",
    "import torch.nn.functional as F\n",
    "\n",
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "544d493c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:38:23.346821Z",
     "iopub.status.busy": "2025-07-10T11:38:23.346440Z",
     "iopub.status.idle": "2025-07-10T11:38:23.602419Z",
     "shell.execute_reply": "2025-07-10T11:38:23.601294Z"
    },
    "papermill": {
     "duration": 0.264923,
     "end_time": "2025-07-10T11:38:23.604069",
     "exception": false,
     "start_time": "2025-07-10T11:38:23.339146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!mkdir -p /kaggle/working/env\n",
    "!mkdir -p /kaggle/working/agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "596492ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:38:23.618767Z",
     "iopub.status.busy": "2025-07-10T11:38:23.618497Z",
     "iopub.status.idle": "2025-07-10T11:38:23.709151Z",
     "shell.execute_reply": "2025-07-10T11:38:23.708363Z"
    },
    "id": "batCUlrPrPpR",
    "papermill": {
     "duration": 0.09934,
     "end_time": "2025-07-10T11:38:23.710444",
     "exception": false,
     "start_time": "2025-07-10T11:38:23.611104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Hyperparameter\n",
    "\n",
    "path_to_data = \"/kaggle/input/hac-rl4rs\"\n",
    "path_to_output = \"/kaggle/working/\"\n",
    "\n",
    "\n",
    "cuda = 0\n",
    "if cuda >= 0 and torch.cuda.is_available():\n",
    "    os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(cuda)\n",
    "    torch.cuda.set_device(cuda)\n",
    "    device = f\"cuda:{cuda}\"\n",
    "else:\n",
    "    device = \"cpu\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f58625c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:38:23.724953Z",
     "iopub.status.busy": "2025-07-10T11:38:23.724712Z",
     "iopub.status.idle": "2025-07-10T11:39:10.849724Z",
     "shell.execute_reply": "2025-07-10T11:39:10.848991Z"
    },
    "papermill": {
     "duration": 47.139057,
     "end_time": "2025-07-10T11:39:10.856589",
     "exception": false,
     "start_time": "2025-07-10T11:38:23.717532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>442720</td>\n",
       "      <td>348225</td>\n",
       "      <td>2</td>\n",
       "      <td>29,25,16,106,114,45,213,196,148</td>\n",
       "      <td>1,1,1,1,1,1,1,1,0</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>458306</td>\n",
       "      <td>348226</td>\n",
       "      <td>1</td>\n",
       "      <td>5,6,36,110,61,127,172,239,199</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>458307</td>\n",
       "      <td>348226</td>\n",
       "      <td>2</td>\n",
       "      <td>1,4,26,107,61,79,199,164,235</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>476558</td>\n",
       "      <td>348227</td>\n",
       "      <td>1</td>\n",
       "      <td>26,14,4,79,113,96,235,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>476559</td>\n",
       "      <td>348227</td>\n",
       "      <td>2</td>\n",
       "      <td>4,14,26,61,113,127,212,239,164</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     442720      348225            2  29,25,16,106,114,45,213,196,148   \n",
       "1     458306      348226            1    5,6,36,110,61,127,172,239,199   \n",
       "2     458307      348226            2     1,4,26,107,61,79,199,164,235   \n",
       "3     476558      348227            1    26,14,4,79,113,96,235,199,172   \n",
       "4     476559      348227            2   4,14,26,61,113,127,212,239,164   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,0  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "1  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "2  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "3  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "4  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "1  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "2  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "3  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "4  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "1  -0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...                   1  \n",
       "2  -0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...                   1  \n",
       "3  0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>530551</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28,32,5,77,130,76,196,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>0</td>\n",
       "      <td>64054,2901,63021,88510,10205,7615,54240,37294,...</td>\n",
       "      <td>1.5653,0.6602,-0.3633,-0.1267,1.8759,-0.856,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>531709</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>30,28,21,77,73,130,235,196,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>0</td>\n",
       "      <td>64054,2901,63021,88510,10205,7615,54240,37294,...</td>\n",
       "      <td>1.5653,2.0783,-0.3633,-0.1426,0.9766,-0.5926,-...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>550062</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>15,36,35,134,128,40,200,219,165</td>\n",
       "      <td>1,1,1,1,1,1,0,1,0</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,38043,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>0.6758,-0.0489,-0.3633,-0.1389,1.8565,-0.0384,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>568391</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>29,30,34,132,81,57,164,192,212</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,50212,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>595031</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2,18,21,60,75,85,167,196,237</td>\n",
       "      <td>1,1,1,1,1,1,0,1,1</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,50212,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1377,1.5852,-0.9129...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     530551           1            1    28,32,5,77,130,76,196,199,172   \n",
       "1     531709           1            2   30,28,21,77,73,130,235,196,172   \n",
       "2     550062           2            1  15,36,35,134,128,40,200,219,165   \n",
       "3     568391           3            1   29,30,34,132,81,57,164,192,212   \n",
       "4     595031           4            1     2,18,21,60,75,85,167,196,237   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,1                                                  0   \n",
       "1  1,1,1,1,1,1,1,1,1                                                  0   \n",
       "2  1,1,1,1,1,1,0,1,0  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "3  1,1,1,1,1,1,1,1,1  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "4  1,1,1,1,1,1,0,1,1  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  64054,2901,63021,88510,10205,7615,54240,37294,...   \n",
       "1  64054,2901,63021,88510,10205,7615,54240,37294,...   \n",
       "2  64054,38043,93755,88510,10205,7615,54240,37294...   \n",
       "3  64054,50212,93755,88510,10205,7615,54240,37294...   \n",
       "4  64054,50212,93755,88510,10205,7615,54240,37294...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,0.6602,-0.3633,-0.1267,1.8759,-0.856,-1...                   1  \n",
       "1  1.5653,2.0783,-0.3633,-0.1426,0.9766,-0.5926,-...                   1  \n",
       "2  0.6758,-0.0489,-0.3633,-0.1389,1.8565,-0.0384,...                   1  \n",
       "3  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1377,1.5852,-0.9129...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(283, 5)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# @title Load data\n",
    "item_info = pd.read_csv(os.path.join(path_to_data, \"item_info.csv\"), sep = \" \")\n",
    "test = pd.read_csv(os.path.join(path_to_data, \"test.csv\"), sep=\"@\")\n",
    "train = pd.read_csv(os.path.join(path_to_data, \"train.csv\"), sep=\"@\")\n",
    "\n",
    "display(test.head())\n",
    "display(train.head())\n",
    "display(item_info.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5aee1c55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:10.871197Z",
     "iopub.status.busy": "2025-07-10T11:39:10.870970Z",
     "iopub.status.idle": "2025-07-10T11:39:10.970019Z",
     "shell.execute_reply": "2025-07-10T11:39:10.969392Z"
    },
    "papermill": {
     "duration": 0.10767,
     "end_time": "2025-07-10T11:39:10.971175",
     "exception": false,
     "start_time": "2025-07-10T11:39:10.863505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>625093.000000</td>\n",
       "      <td>625093.000000</td>\n",
       "      <td>625093.000000</td>\n",
       "      <td>625093.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>439888.458172</td>\n",
       "      <td>170087.854942</td>\n",
       "      <td>1.524293</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>111787.863723</td>\n",
       "      <td>100251.171644</td>\n",
       "      <td>0.661042</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>255612.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>347310.000000</td>\n",
       "      <td>82483.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>440033.000000</td>\n",
       "      <td>169611.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>533000.000000</td>\n",
       "      <td>255075.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>650957.000000</td>\n",
       "      <td>348225.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           timestamp     session_id    sequence_id  behavior_policy_id\n",
       "count  625093.000000  625093.000000  625093.000000            625093.0\n",
       "mean   439888.458172  170087.854942       1.524293                 1.0\n",
       "std    111787.863723  100251.171644       0.661042                 0.0\n",
       "min    255612.000000       1.000000       1.000000                 1.0\n",
       "25%    347310.000000   82483.000000       1.000000                 1.0\n",
       "50%    440033.000000  169611.000000       1.000000                 1.0\n",
       "75%    533000.000000  255075.000000       2.000000                 1.0\n",
       "max    650957.000000  348225.000000       4.000000                 1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>156274.000000</td>\n",
       "      <td>156274.000000</td>\n",
       "      <td>156274.000000</td>\n",
       "      <td>156274.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>443958.901135</td>\n",
       "      <td>393571.731542</td>\n",
       "      <td>1.451399</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>110619.434687</td>\n",
       "      <td>26343.691773</td>\n",
       "      <td>0.568777</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>255612.000000</td>\n",
       "      <td>348225.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>348716.500000</td>\n",
       "      <td>370636.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>441514.000000</td>\n",
       "      <td>393567.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>534752.000000</td>\n",
       "      <td>416393.750000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>650957.000000</td>\n",
       "      <td>439131.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           timestamp     session_id    sequence_id  behavior_policy_id\n",
       "count  156274.000000  156274.000000  156274.000000            156274.0\n",
       "mean   443958.901135  393571.731542       1.451399                 1.0\n",
       "std    110619.434687   26343.691773       0.568777                 0.0\n",
       "min    255612.000000  348225.000000       1.000000                 1.0\n",
       "25%    348716.500000  370636.000000       1.000000                 1.0\n",
       "50%    441514.000000  393567.000000       1.000000                 1.0\n",
       "75%    534752.000000  416393.750000       2.000000                 1.0\n",
       "max    650957.000000  439131.000000       4.000000                 1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(train.describe())\n",
    "display(test.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a6071136",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:10.986728Z",
     "iopub.status.busy": "2025-07-10T11:39:10.986523Z",
     "iopub.status.idle": "2025-07-10T11:39:10.997247Z",
     "shell.execute_reply": "2025-07-10T11:39:10.996713Z"
    },
    "id": "6uAs4kp4whrk",
    "papermill": {
     "duration": 0.019572,
     "end_time": "2025-07-10T11:39:10.998171",
     "exception": false,
     "start_time": "2025-07-10T11:39:10.978599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Support function\n",
    "\n",
    "def set_random_seed(seed):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "def padding_and_clip(sequence, max_len, padding_direction = 'left'):\n",
    "    if len(sequence) < max_len:\n",
    "        sequence = [0] * (max_len - len(sequence)) + sequence if padding_direction == 'left' else sequence + [0] * (max_len - len(sequence))\n",
    "    sequence = sequence[-max_len:] if padding_direction == 'left' else sequence[:max_len]\n",
    "    # print(f\"sequence{sequence}\")\n",
    "    return sequence\n",
    "\n",
    "def get_regularization(*modules):\n",
    "  \"\"\"\n",
    "  Customized L2 regularization\n",
    "  \"\"\"\n",
    "  reg = 0\n",
    "  for m in modules:\n",
    "    for p in m.parameters():\n",
    "      reg = torch.mean(p * p) + reg\n",
    "  return reg\n",
    "\n",
    "def wrap_batch(batch, device):\n",
    "  \"\"\"\n",
    "  Build feed_dict from batch data and move data to device\n",
    "  \"\"\"\n",
    "  for k,val in batch.items():\n",
    "    if type(val).__module__ == np.__name__:\n",
    "        batch[k] = torch.from_numpy(val)\n",
    "    elif torch.is_tensor(val):\n",
    "        batch[k] = val\n",
    "    elif type(val) is list:\n",
    "        batch[k] = torch.tensor(val)\n",
    "    else:\n",
    "        continue\n",
    "    if batch[k].type() == \"torch.DoubleTensor\":\n",
    "        batch[k] = batch[k].float()\n",
    "    batch[k] = batch[k].to(device)\n",
    "  return batch\n",
    "\n",
    "def sample_categorical_action(action_prob, candidate_ids, slate_size,\n",
    "                              with_replacement=True, batch_wise=False,\n",
    "                              return_idx=False):\n",
    "  '''\n",
    "  @input:\n",
    "  - action_prob: (B, L)\n",
    "  - candidate_ids: (B, L) or (1, L)\n",
    "  - slate_size: K\n",
    "  - with_replacement: sample with replacement\n",
    "  - batch_wise: do batch wise candidate selection\n",
    "  '''\n",
    "  if with_replacement:\n",
    "    # (K, B)\n",
    "    indices = Categorical(action_prob).sample(sample_shape = (slate_size,))\n",
    "    # (B, K)\n",
    "    indices = torch.transpose(indices, 0, 1)\n",
    "  else:\n",
    "    indices = torch.cat([torch.multinomial(prob, slate_size, replacement=False).view(1, -1) \\\n",
    "                         for prob in action_prob], dim = 0)\n",
    "  action = torch.gather(candidate_ids, 1, indices) if batch_wise else candidate_ids[indices]\n",
    "  if return_idx:\n",
    "    return action.detach(), indices.detach()\n",
    "  else:\n",
    "    return action.detach()\n",
    "\n",
    "\n",
    "##################\n",
    "#   Learning     #\n",
    "##################\n",
    "\n",
    "class LinearScheduler(object):\n",
    "  def __init__(self, schedule_timesteps, final_p, initial_p=1.0):\n",
    "    self.schedule_timesteps = schedule_timesteps\n",
    "    self.final_p = final_p\n",
    "    self.initial_p = initial_p\n",
    "\n",
    "  def value(self, t):\n",
    "    '''\n",
    "    see Schedule.value\n",
    "    '''\n",
    "    fraction = min(float(t) / self.schedule_timesteps, 1.0)\n",
    "    return self.initial_p + fraction * (self.final_p - self.initial_p)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef882b22",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.013109Z",
     "iopub.status.busy": "2025-07-10T11:39:11.012902Z",
     "iopub.status.idle": "2025-07-10T11:39:11.023049Z",
     "shell.execute_reply": "2025-07-10T11:39:11.022528Z"
    },
    "id": "I_-339N7XCzA",
    "papermill": {
     "duration": 0.018775,
     "end_time": "2025-07-10T11:39:11.024006",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.005231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Plot Function\n",
    "\n",
    "def smooth(values, window = 3):\n",
    "  left = window // 2\n",
    "  new_values = [np.mean(values[max(0,idx-left):min(idx-left+window,len(values))]) for idx in range(len(values))]\n",
    "  return new_values\n",
    "\n",
    "\n",
    "def get_rl_training_info(log_path, training_losses = ['actor_loss', 'critic_loss']):\n",
    "  episode = []\n",
    "  average_total_reward, reward_variance, max_total_reward, min_total_reward, average_n_step, max_n_step, min_n_step \\\n",
    "          = [], [], [], [], [], [], []\n",
    "  training_loss_records = {k: [] for k in training_losses}\n",
    "  with open(log_path, 'r') as infile:\n",
    "    for line in tqdm(infile):\n",
    "      split = line.split('@')\n",
    "      # episode\n",
    "      episode.append(eval(split[0].split(':')[1]))\n",
    "      # episode report\n",
    "      episode_report = eval(split[1].strip()[len(\"episode report:\"):])\n",
    "      average_total_reward.append(episode_report['average_total_reward'])\n",
    "      reward_variance.append(episode_report['reward_variance'])\n",
    "      max_total_reward.append(episode_report['max_total_reward'])\n",
    "      min_total_reward.append(episode_report['min_total_reward'])\n",
    "      average_n_step.append(episode_report['average_n_step'])\n",
    "      max_n_step.append(episode_report['max_n_step'])\n",
    "      min_n_step.append(episode_report['min_n_step'])\n",
    "      # loss report\n",
    "      if training_losses:\n",
    "          loss_report = eval(split[2].strip()[len(\"step loss:\"):])\n",
    "          for k in training_losses:\n",
    "              training_loss_records[k].append(loss_report[k])\n",
    "  info = {\n",
    "      \"episode\": episode,\n",
    "      \"average_total_reward\": average_total_reward,\n",
    "      \"reward_variance\": reward_variance,\n",
    "      \"max_total_reward\": max_total_reward,\n",
    "      \"min_total_reward\": min_total_reward,\n",
    "      \"average_depth_per_episode\": average_n_step,\n",
    "      \"max_depth_per_episode\": max_n_step,\n",
    "      \"min_depth_per_episode\": min_n_step\n",
    "  }\n",
    "  if training_losses:\n",
    "      for k in training_losses:\n",
    "        info[k] = training_loss_records[k]\n",
    "  return info\n",
    "\n",
    "def plot_multiple_line(legend_names, list_of_stats, x_name, ncol = 2, row_height = 4, save_path=\"/kaggle/working/fig/rl.png\"):\n",
    "  '''\n",
    "  @input:\n",
    "  - legend_names: [legend]\n",
    "  - list_of_stats: [{field_name: [values]}]\n",
    "  - x_name: x-axis field_name\n",
    "  - ncol: number of subplots in each row\n",
    "  '''\n",
    "  plt.rcParams.update({'font.size': 14})\n",
    "  assert ncol > 0\n",
    "  features = list(list_of_stats[0].keys())\n",
    "  features.remove(x_name)\n",
    "  N = len(features)\n",
    "  fig_height = 12 // ncol if len(features) == 1 else row_height*((N-1)//ncol+1)\n",
    "  plt.figure(figsize = (16, fig_height))\n",
    "  for i,field in enumerate(features):\n",
    "      plt.subplot((N-1)//ncol+1,ncol,i+1)\n",
    "      minY,maxY = float('inf'),float('-inf')\n",
    "      for j,L in enumerate(legend_names):\n",
    "          X = list_of_stats[j][x_name]\n",
    "          value_list = list_of_stats[j][field]\n",
    "          minY,maxY = min(minY,min(value_list)),max(maxY,max(value_list))\n",
    "          plt.plot(X[:len(value_list)], value_list, label = L)\n",
    "      plt.ylabel(field)\n",
    "      plt.xlabel(x_name)\n",
    "      scale = 1e-4 + maxY - minY\n",
    "      plt.ylim(minY - scale * 0.05, maxY + scale * 0.05)\n",
    "      plt.legend()\n",
    "  plt.savefig(save_path)\n",
    "  plt.show()\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c7c0e18",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.038712Z",
     "iopub.status.busy": "2025-07-10T11:39:11.038529Z",
     "iopub.status.idle": "2025-07-10T11:39:11.042082Z",
     "shell.execute_reply": "2025-07-10T11:39:11.041443Z"
    },
    "id": "HVUXZjicg3kg",
    "papermill": {
     "duration": 0.012012,
     "end_time": "2025-07-10T11:39:11.043085",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.031073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Socrer function\n",
    "def dot_scorer(action_emb, item_emb, item_dim):\n",
    "  '''\n",
    "  score = item_emb * weight\n",
    "\n",
    "  @input:\n",
    "  - action_emb: (B, i_dim)\n",
    "  - item_emb: (B, L, i_dim) or (1, L, i_dim)\n",
    "  @output:\n",
    "  - score: (B, L)\n",
    "  '''\n",
    "  output = torch.sum(action_emb.view(-1, 1, item_dim) * item_emb, dim=-1)\n",
    "\n",
    "  return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5404489e",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.057809Z",
     "iopub.status.busy": "2025-07-10T11:39:11.057598Z",
     "iopub.status.idle": "2025-07-10T11:39:11.062567Z",
     "shell.execute_reply": "2025-07-10T11:39:11.061912Z"
    },
    "id": "t-f8lshQUlDz",
    "papermill": {
     "duration": 0.013457,
     "end_time": "2025-07-10T11:39:11.063579",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.050122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Dense Neural Network\n",
    "\n",
    "class DNN(nn.Module):\n",
    "  def __init__(self, in_dim, hidden_dims, out_dim=1, dropout_rate= 0.,\n",
    "               do_batch_norm=True):\n",
    "    super(DNN, self).__init__()\n",
    "    self.in_dim = in_dim\n",
    "    layers = []\n",
    "\n",
    "    for hidden_dim in hidden_dims:\n",
    "      linear_layer = nn.Linear(in_dim, hidden_dim)\n",
    "\n",
    "      layers.append(linear_layer)\n",
    "      in_dim = hidden_dim\n",
    "      layers.append(nn.ReLU())\n",
    "      if dropout_rate > 0:\n",
    "        layers.append(nn.Dropout(dropout_rate))\n",
    "      if do_batch_norm:\n",
    "        layers.append(nn.LayerNorm(hidden_dim))\n",
    "\n",
    "    # Prediction layer\n",
    "    last_layer = nn.Linear(in_dim, out_dim)\n",
    "    layers.append(last_layer)\n",
    "\n",
    "    self.layers = nn.Sequential(*layers)\n",
    "\n",
    "  def forward(self, x):\n",
    "    x = x.view(-1, self.in_dim)\n",
    "    logit = self.layers(x)\n",
    "    return logit\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c9fb245a",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.078047Z",
     "iopub.status.busy": "2025-07-10T11:39:11.077854Z",
     "iopub.status.idle": "2025-07-10T11:39:11.082499Z",
     "shell.execute_reply": "2025-07-10T11:39:11.081859Z"
    },
    "id": "EcNXI4e7tyGR",
    "papermill": {
     "duration": 0.012899,
     "end_time": "2025-07-10T11:39:11.083483",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.070584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title # Data Reader class\n",
    "\n",
    "class BaseDataReader(Dataset):\n",
    "  def __init__(self, params):\n",
    "    self.phase = 'train'\n",
    "    self.n_worker = params['n_worker']\n",
    "    self._read_data(params)\n",
    "\n",
    "  def _read_data(self, params):\n",
    "    self.data = dict()\n",
    "    self.data['train'] = params['train']\n",
    "    self.data['val'] = params['val']\n",
    "\n",
    "\n",
    "  def __getitem__(self, idx):\n",
    "    pass\n",
    "\n",
    "  def __len__(self):\n",
    "    return len(self.data[self.phase])\n",
    "\n",
    "  def get_statistics(self):\n",
    "    return {'length': len(self)}\n",
    "\n",
    "  def set_phase(self, phase):\n",
    "    assert phase in ['train', 'val', 'test']\n",
    "    self.phase = phase\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32b4d513",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.098328Z",
     "iopub.status.busy": "2025-07-10T11:39:11.098127Z",
     "iopub.status.idle": "2025-07-10T11:39:11.106376Z",
     "shell.execute_reply": "2025-07-10T11:39:11.105735Z"
    },
    "papermill": {
     "duration": 0.016677,
     "end_time": "2025-07-10T11:39:11.107368",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.090691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title RL4RS Data Reader\n",
    "\n",
    "class RL4RSDataReader(BaseDataReader):\n",
    "        \n",
    "    def log(self):\n",
    "        super().log()\n",
    "        \n",
    "    def __init__(self, params):\n",
    "        '''\n",
    "        - from BaseReader:\n",
    "            - phase\n",
    "            - data: will add Position column\n",
    "        '''\n",
    "        self.max_seq_len = params['max_seq_len']\n",
    "        super().__init__(params)\n",
    "        \n",
    "    def _read_data(self, params):\n",
    "        # read data_file\n",
    "        super()._read_data(params)\n",
    "        print(\"Load item meta data\")\n",
    "        self.item_meta = params['item_meta']\n",
    "        self.item_vec_size = len(eval(self.item_meta.iloc[0]['item_vec']))\n",
    "        self.portrait_len = len(eval(self.data['train']['user_protrait'][0]))\n",
    "    \n",
    "    ###########################\n",
    "    #        Iterator         #\n",
    "    ###########################\n",
    "        \n",
    "    def __getitem__(self, idx):\n",
    "        '''\n",
    "        train batch after collate:\n",
    "        {\n",
    "        'timestamp': (B,), \n",
    "        'exposure': (B,K) \n",
    "        'exposure_features': (B,K,item_dim)\n",
    "        'feedback': (B,K)\n",
    "        'history': (B,H)\n",
    "        'history_features': (B,H,item_dim) \n",
    "        'history_features': (B,) \n",
    "        'user_profile': (B,user_dim) \n",
    "        }\n",
    "        '''\n",
    "        timestamp, _, __, exposure, feedback, history, portrait, ___, ____ = self.data[self.phase].iloc[idx]\n",
    "        # timestamp@session_id@sequence_id@exposed_items@user_feedback@user_seqfeature@user_protrait@item_feature@behavior_policy_id\n",
    "        exposure = eval(exposure)\n",
    "        history = eval(f\"[{history}]\")\n",
    "        hist_length = int(min(len(history), self.max_seq_len))\n",
    "        history = padding_and_clip(history, self.max_seq_len)\n",
    "        feedback = eval(feedback)\n",
    "        record = {\n",
    "            'timestamp': int(timestamp),\n",
    "            'exposure': np.array(exposure).astype(int), \n",
    "            'exposure_features': self.get_item_list_meta(exposure).astype(float),\n",
    "            'feedback': np.array(feedback).astype(float),\n",
    "            'history': np.array(history).astype(int),\n",
    "            'history_features': self.get_item_list_meta(history).astype(float),\n",
    "            'history_length': hist_length,\n",
    "            'history_mask': np.array(padding_and_clip([1]*hist_length, self.max_seq_len)),\n",
    "            'user_profile': np.log(np.array(eval(portrait)) + 1)\n",
    "        }\n",
    "        return record\n",
    "        \n",
    "    def get_item_list_meta(self, iid_list, from_idx = False):\n",
    "        '''\n",
    "        @input:\n",
    "        - iid_list: item id list\n",
    "        @output:\n",
    "        - meta_data: {field_name: (B,feature_size)}\n",
    "        '''\n",
    "        features = []\n",
    "        for iid in iid_list:\n",
    "            if iid == 0:\n",
    "                features.append([0]*self.item_vec_size)\n",
    "            else:\n",
    "                features.append(eval(self.item_meta.iloc[iid-1]['item_vec']))\n",
    "        return np.array(features)\n",
    "    \n",
    "    def get_statistics(self):\n",
    "        '''\n",
    "        - n_user\n",
    "        - n_item\n",
    "        - s_parsity\n",
    "        - from BaseReader:\n",
    "            - length\n",
    "            - fields\n",
    "        '''\n",
    "        stats = super().get_statistics()\n",
    "        stats[\"n_item\"] = len(self.item_meta)\n",
    "        stats[\"item_vec_size\"] = self.item_vec_size\n",
    "        stats[\"user_portrait_len\"] = self.portrait_len\n",
    "        stats[\"max_seq_len\"] = self.max_seq_len\n",
    "        stats[\"n_feedback\"] = 2\n",
    "        return stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88b476d8",
   "metadata": {
    "id": "BZu5Gr-atrEE",
    "papermill": {
     "duration": 0.006873,
     "end_time": "2025-07-10T11:39:11.121268",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.114395",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d487ca14",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.135802Z",
     "iopub.status.busy": "2025-07-10T11:39:11.135604Z",
     "iopub.status.idle": "2025-07-10T11:39:11.143720Z",
     "shell.execute_reply": "2025-07-10T11:39:11.143038Z"
    },
    "id": "aE05j2QDr6lh",
    "papermill": {
     "duration": 0.016659,
     "end_time": "2025-07-10T11:39:11.144870",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.128211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Base Model\n",
    "\n",
    "class BaseModel(nn.Module):\n",
    "  def __init__(self, reader, params):\n",
    "    super().__init__()\n",
    "    self.display_name = \"BaseModel\"\n",
    "    self.reader = reader\n",
    "    self.model_path = params['model_path']\n",
    "    self.loss_type = params['loss_type']\n",
    "    self.l2_coef = params['l2_coef']\n",
    "    self.device = params['device']\n",
    "    self.sigmoid = nn.Sigmoid()\n",
    "    self._define_params(reader, params)\n",
    "\n",
    "  def get_regularization(self, *modules):\n",
    "    return get_regularization(*modules)\n",
    "\n",
    "  def do_forward_and_loss(self, feed_dict: dict) -> dict:\n",
    "    '''\n",
    "    Used during training to compute predictions and the loss.\n",
    "    '''\n",
    "    out_dict = self.get_forward(feed_dict)\n",
    "    out_dict['loss'] = self.get_loss(feed_dict, out_dict)\n",
    "    return out_dict\n",
    "\n",
    "  def forward(self, feed_dict: dict, return_prob=True) -> dict:\n",
    "    '''\n",
    "      Used during evaluation/prediction to generate predictions and probabilities\n",
    "    '''\n",
    "    out_dict = self.get_forward(feed_dict)\n",
    "    if return_prob:\n",
    "      out_dict['probs'] = self.sigmoid(out_dict['preds'])\n",
    "    return out_dict\n",
    "\n",
    "  def wrap_batch (self, batch):\n",
    "    '''\n",
    "    Build feed_dict from batch data and move data to self.device\n",
    "    '''\n",
    "    for k, val in batch.items():\n",
    "      if type(val).__module__ == np.__name__:\n",
    "        batch[k] = torch.from_numpy(val)\n",
    "      elif torch.is_tensor(val):\n",
    "        batch[k] = val\n",
    "      elif type(val) is list:\n",
    "        batch[k] = torch.tensor(val)\n",
    "      else:\n",
    "        continue # No compatiable type\n",
    "      if batch[k].type() == 'torch.DoubleTensor':\n",
    "        batch[k] = batch[k].type(torch.FloatTensor)\n",
    "      batch[k] = batch[k].to(self.device)\n",
    "    return batch\n",
    "\n",
    "  def save_checkpoint(self):\n",
    "    torch.save({\n",
    "        \"model_state_dict\": self.state_dict(),\n",
    "        \"optimizer_state_dict\": self.optimizer.state_dict(),\n",
    "    }, self.model_path + \".checkpoint\")\n",
    "\n",
    "  def load_checkpoint(self, model_path, with_optimizer=True):\n",
    "    checkpoint = torch.load(model_path + \".checkpoint\",\n",
    "                            map_location=self.device)\n",
    "    self.load_state_dict(checkpoint[\"model_state_dict\"])\n",
    "    if with_optimizer:\n",
    "      self.optimizer.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n",
    "    self.model_path = model_path\n",
    "\n",
    "  def _define_params(self, reader, params):\n",
    "    pass\n",
    "\n",
    "  def get_forward(self, feed_dict: dict) -> dict:\n",
    "    pass\n",
    "\n",
    "  def get_loss(self, feed_dict: dict, out_dict: dict) -> dict:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3cdffbea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.160072Z",
     "iopub.status.busy": "2025-07-10T11:39:11.159879Z",
     "iopub.status.idle": "2025-07-10T11:39:11.167356Z",
     "shell.execute_reply": "2025-07-10T11:39:11.166858Z"
    },
    "papermill": {
     "duration": 0.016333,
     "end_time": "2025-07-10T11:39:11.168370",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.152037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RL4RSUserResponse(BaseModel):\n",
    "        \n",
    "    def __init__(self,reader, params):\n",
    "        super().__init__(reader, params)\n",
    "        \n",
    "        self.bce_loss = nn.BCEWithLogitsLoss(reduction = 'none')\n",
    "        self.loss = []\n",
    "        \n",
    "    def _define_params(self, reader, params):\n",
    "        stats = reader.get_statistics()\n",
    "        self.portrait_len = stats['user_portrait_len']\n",
    "        self.item_dim = stats['item_vec_size']\n",
    "        self.hidden_dims = params['hidden_dims']\n",
    "        self.feature_dim = params['feature_dim']\n",
    "        self.dropout_rate = params['dropout_rate']\n",
    "        self.attn_n_head = params['attn_n_head']\n",
    "        # portrait embedding\n",
    "        \n",
    "        self.portrait_encoding_layer = DNN(self.portrait_len, self.hidden_dims, self.feature_dim, \n",
    "                                           dropout_rate = self.dropout_rate, do_batch_norm = False)\n",
    "        # item_emb\n",
    "        self.item_emb_layer = nn.Linear(self.item_dim, self.feature_dim)\n",
    "        # user history encoder\n",
    "        self.seq_self_attn_layer = nn.MultiheadAttention(self.feature_dim, self.attn_n_head, batch_first = True)\n",
    "        self.seq_user_attn_layer = nn.MultiheadAttention(self.feature_dim, self.attn_n_head, batch_first = True)\n",
    "    \n",
    "    def get_forward(self, feed_dict: dict) -> dict:\n",
    "        # user embedding (B,1,f_dim)\n",
    "        user_emb = self.portrait_encoding_layer(feed_dict['user_profile']).view(-1,1,self.feature_dim) \n",
    "        # history embedding (B,H,f_dim)\n",
    "        history_item_emb = self.item_emb_layer(feed_dict['history_features'])\n",
    "        # sequence self attention, encoded sequence is (B,H,f_dim)\n",
    "        seq_encoding, attn_weight = self.seq_self_attn_layer(history_item_emb, history_item_emb, history_item_emb)\n",
    "        # cross attention, encoded history is (B,1,f_dim)\n",
    "        user_interest, attn_weight = self.seq_user_attn_layer(user_emb, seq_encoding, seq_encoding)\n",
    "        # rec item embedding (B,L,f_dim)\n",
    "        exposure_item_emb = self.item_emb_layer(feed_dict['exposure_features'])\n",
    "\n",
    "        # rec item attention score (B,L)\n",
    "        score = torch.sum(exposure_item_emb * user_interest, dim = -1)\n",
    "        # regularization terms\n",
    "        reg = self.get_regularization(self.portrait_encoding_layer, self.item_emb_layer, \n",
    "                                      self.seq_user_attn_layer, self.seq_self_attn_layer)\n",
    "        return {'preds': score, 'reg': reg}\n",
    "    \n",
    "    def get_loss(self, feed_dict: dict, out_dict: dict):\n",
    "        \"\"\"\n",
    "        @input:\n",
    "        - feed_dict: {...}\n",
    "        - out_dict: {\"preds\":, \"reg\":}\n",
    "        \n",
    "        Loss terms implemented:\n",
    "        - BCE\n",
    "        \"\"\"\n",
    "        \n",
    "        preds, reg = out_dict[\"preds\"].view(-1), out_dict[\"reg\"] # (B,L), scalar\n",
    "        target = feed_dict['feedback'].view(-1).to(torch.float) # (B,L)\n",
    "        # loss\n",
    "        loss = torch.mean(self.bce_loss(self.sigmoid(preds), target))\n",
    "        loss = loss + self.l2_coef * reg\n",
    "        self.loss.append(loss.item())\n",
    "        return loss\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ad04193",
   "metadata": {
    "id": "EPzAu5L7uFO5",
    "papermill": {
     "duration": 0.006688,
     "end_time": "2025-07-10T11:39:11.182164",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.175476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train Environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ffcba2d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.196428Z",
     "iopub.status.busy": "2025-07-10T11:39:11.196237Z",
     "iopub.status.idle": "2025-07-10T11:39:11.204463Z",
     "shell.execute_reply": "2025-07-10T11:39:11.203832Z"
    },
    "papermill": {
     "duration": 0.01643,
     "end_time": "2025-07-10T11:39:11.205442",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.189012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params = dict()\n",
    "params['train'] = train\n",
    "params['val'] = test\n",
    "params['item_meta'] = item_info\n",
    "params['n_worker'] = 4\n",
    "params['max_seq_len'] = 50\n",
    "\n",
    "params['loss_type'] = 'bce'\n",
    "params['device'] = device\n",
    "params['l2_coef'] = 0.001\n",
    "params['lr'] = 0.0003\n",
    "params['feature_dim'] = 16\n",
    "params['hidden_dims'] = [256]\n",
    "params['attn_n_head'] = 2\n",
    "params['batch_size'] = 128\n",
    "params['seed'] = 11\n",
    "params['epoch'] = 2\n",
    "params['dropout_rate'] = 0.2\n",
    "params['model_path'] = os.path.join(path_to_output, \n",
    "                          f\"env/rl4rs_user_env_lr{params['lr']}_reg{params['l2_coef']}.model\")\n",
    "set_random_seed(params['seed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c763188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T11:39:11.220050Z",
     "iopub.status.busy": "2025-07-10T11:39:11.219854Z",
     "iopub.status.idle": "2025-07-10T12:48:33.117516Z",
     "shell.execute_reply": "2025-07-10T12:48:33.116631Z"
    },
    "id": "pUiyHg58pQk3",
    "outputId": "de7d8a66-a100-4cfe-b476-963ac617cda0",
    "papermill": {
     "duration": 4161.9066,
     "end_time": "2025-07-10T12:48:33.118994",
     "exception": false,
     "start_time": "2025-07-10T11:39:11.212394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Load item meta data\n",
      "epoch 0 is training\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "625152it [27:45, 375.41it/s]                            \n",
      "156288it [06:42, 388.57it/s]                            \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1 validating; auc: 0.7725\n",
      "epoch 1 is training\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "625152it [28:03, 371.24it/s]                            \n",
      "156288it [06:45, 385.14it/s]                            \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 2 validating; auc: 0.7790\n"
     ]
    }
   ],
   "source": [
    "# @title Train user response\n",
    "reader = RL4RSDataReader(params)\n",
    "model = RL4RSUserResponse(reader, params).to(device)\n",
    "\n",
    "\n",
    "# reader = RL4RSDataReader(params)\n",
    "# model = RL4RSUserResponse(reader, params).to(device)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=params['lr'])\n",
    "model.optimizer = optimizer\n",
    "\n",
    "\n",
    "epo = 0\n",
    "while epo < params['epoch']:\n",
    "  print(f\"epoch {epo} is training\")\n",
    "  epo += 1\n",
    "\n",
    "  model.train()\n",
    "  reader.set_phase(\"train\")\n",
    "  train_loader = DataLoader(reader, params['batch_size'], shuffle = True, pin_memory = True,\n",
    "                            num_workers= params['n_worker'])\n",
    "\n",
    "  t1 = time()\n",
    "  pbar = tqdm(total=len(train_loader.dataset))\n",
    "  step_loss = []\n",
    "  for i, batch_data in enumerate(train_loader):\n",
    "    optimizer.zero_grad()\n",
    "    wrapped_batch = wrap_batch(batch_data, device)\n",
    "\n",
    "    out_dict = model.do_forward_and_loss(wrapped_batch)\n",
    "    loss = out_dict['loss']\n",
    "    loss.backward()\n",
    "    step_loss.append(loss.item())\n",
    "    optimizer.step()\n",
    "    pbar.update(params['batch_size'])\n",
    "    # print(model.loss)\n",
    "    # if (i + 1) % 10 == 0:\n",
    "      # print(f\"Iteration {i + 1}, loss {np.mean(step_loss[-100:])}\")\n",
    "  pbar.close()\n",
    "    # print(\"Epoch {}; time {:.4f}\".format(epo, time() - t1))\n",
    "\n",
    "  # validation\n",
    "  t2 = time()\n",
    "  reader.set_phase(\"val\")\n",
    "  val_loader = DataLoader(reader, params['batch_size'], shuffle = False, pin_memory = False,\n",
    "                          num_workers= params['n_worker'])\n",
    "  valid_probs, valid_true =  [], []\n",
    "  pbar = tqdm(total = len(val_loader.dataset))\n",
    "  with torch.no_grad():\n",
    "    for i, batch_data in enumerate(val_loader):\n",
    "      wrapped_batch = wrap_batch(batch_data, device)\n",
    "      out_dict = model.forward(wrapped_batch)\n",
    "      valid_probs.append(out_dict['probs'].cpu().numpy())\n",
    "      valid_true.append(batch_data['feedback'].cpu().numpy())\n",
    "      pbar.update(params['batch_size'])\n",
    "  pbar.close()\n",
    "  auc = roc_auc_score(np.concatenate(valid_true), np.concatenate(valid_probs))\n",
    "  print(f\"epoch {epo} validating\" + \"; auc: {:.4f}\".format(np.mean(auc)))\n",
    "  model.save_checkpoint()\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1f4a9969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:33.651313Z",
     "iopub.status.busy": "2025-07-10T12:48:33.649937Z",
     "iopub.status.idle": "2025-07-10T12:48:33.987711Z",
     "shell.execute_reply": "2025-07-10T12:48:33.987004Z"
    },
    "id": "eqgPbcAsID16",
    "outputId": "ca1dea56-cb24-4412-b8bb-133c693198cd",
    "papermill": {
     "duration": 0.634416,
     "end_time": "2025-07-10T12:48:33.988964",
     "exception": false,
     "start_time": "2025-07-10T12:48:33.354548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# @title Plot loss\n",
    "\n",
    "def plot_line(labels, data_dicts, x_name='X-Axis', y_name='Y-Axis'):\n",
    "    plt.figure(figsize=(20, 6))\n",
    "    for label, data_dict in zip(labels, data_dicts):\n",
    "        for key, values in data_dict.items():\n",
    "            plt.plot(values, label=f\"{label} - {key}\")\n",
    "    plt.xlabel(x_name)\n",
    "    plt.ylabel(y_name)\n",
    "    plt.title('Loss Plot')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "loss_values = model.loss\n",
    "smoothed_loss = smooth(np.array(loss_values), window=300)  # Adjust smoothness if needed\n",
    "\n",
    "info = {'Loss': smoothed_loss}\n",
    "plot_line(['Model'], [info], x_name='Epoch', y_name='Loss Value')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c602524b",
   "metadata": {
    "papermill": {
     "duration": 0.23609,
     "end_time": "2025-07-10T12:48:34.463211",
     "exception": false,
     "start_time": "2025-07-10T12:48:34.227121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train HAC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2830fdc8",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:34.934312Z",
     "iopub.status.busy": "2025-07-10T12:48:34.934075Z",
     "iopub.status.idle": "2025-07-10T12:48:34.938959Z",
     "shell.execute_reply": "2025-07-10T12:48:34.938422Z"
    },
    "id": "Q7IfdzX4LFTk",
    "papermill": {
     "duration": 0.240933,
     "end_time": "2025-07-10T12:48:34.940054",
     "exception": false,
     "start_time": "2025-07-10T12:48:34.699121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Cost function\n",
    "def mean_with_cost(feedback, zero_reward_cost=0.1):\n",
    "  B, L = feedback.shape\n",
    "  cost = torch.zeros_like(feedback)\n",
    "  cost[feedback == 0] = -zero_reward_cost\n",
    "  reward = torch.mean(feedback + cost, dim=-1)\n",
    "  return reward\n",
    "\n",
    "def nsw(avg_r, min_r, lambda_nsw=1e-4, epsilon=1e-8):\n",
    "    r_vec = torch.stack([avg_r, min_r + lambda_nsw], dim=-1)\n",
    "    r_vec = torch.clamp(r_vec, min=epsilon)\n",
    "    return torch.sum(torch.log(r_vec), dim=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0c9e1223",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:35.496404Z",
     "iopub.status.busy": "2025-07-10T12:48:35.496142Z",
     "iopub.status.idle": "2025-07-10T12:48:35.500295Z",
     "shell.execute_reply": "2025-07-10T12:48:35.499773Z"
    },
    "id": "KP_0zmoEFwta",
    "papermill": {
     "duration": 0.271542,
     "end_time": "2025-07-10T12:48:35.501309",
     "exception": false,
     "start_time": "2025-07-10T12:48:35.229767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title BaseRL Environment\n",
    "class BaseEnv():\n",
    "  def __init__(self, params):\n",
    "    super().__init__()\n",
    "    self.reward_func = params['reward_function']\n",
    "    self.max_step_per_episode = params['max_step']\n",
    "    self.initial_temper = params[\"initial_temper\"]\n",
    "\n",
    "  def reset(self, paras):\n",
    "    pass\n",
    "  def step(self, action):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6a08760",
   "metadata": {
    "papermill": {
     "duration": 0.233872,
     "end_time": "2025-07-10T12:48:35.972069",
     "exception": false,
     "start_time": "2025-07-10T12:48:35.738197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 1. Environment define"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3b114c31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:36.503902Z",
     "iopub.status.busy": "2025-07-10T12:48:36.503616Z",
     "iopub.status.idle": "2025-07-10T12:48:36.522097Z",
     "shell.execute_reply": "2025-07-10T12:48:36.521597Z"
    },
    "papermill": {
     "duration": 0.314138,
     "end_time": "2025-07-10T12:48:36.523156",
     "exception": false,
     "start_time": "2025-07-10T12:48:36.209018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RL4RSEnvironment(BaseEnv):\n",
    "    \n",
    "    def __init__(self, params):\n",
    "        super().__init__(params)\n",
    "        self.reader = RL4RSDataReader(params)\n",
    "        self.user_response_model = RL4RSUserResponse(self.reader, params)\n",
    "        checkpoint = torch.load(params['model_path'] + \".checkpoint\", map_location=device)\n",
    "        self.user_response_model.load_state_dict(checkpoint[\"model_state_dict\"])\n",
    "        self.user_response_model.to(device)\n",
    "    \n",
    "        # spaces\n",
    "        stats = self.reader.get_statistics()\n",
    "        self.action_space = {'item_id': ('nomial', stats['n_item']),\n",
    "                             'item_feature': ('continuous', stats['item_vec_size'], 'normal')}\n",
    "        self.observation_space = {'user_profile': ('continuous', stats['user_portrait_len'], 'positive'),\n",
    "                                  'history': ('sequence', stats['max_seq_len'], ('continuous', stats['item_vec_size']))}\n",
    "        self.n_worker = params['n_worker']\n",
    "        \n",
    "    def reset(self, params = {'batch_size': 1, 'empty_history': True}):\n",
    "        '''\n",
    "        Reset environment with new sampled users\n",
    "        @input:\n",
    "        - params: {'batch_size': scalar, \n",
    "                    'empty_history': True if start from empty history, \n",
    "                    'initial_history': start with initial history, mu }\n",
    "        @output:\n",
    "        - observation: {'user_profile': (B, portrait_dim), \n",
    "                        'history': (B, H), \n",
    "                        'history_feature': (B, H, item_dim)\n",
    "                        'history_feedback': (B, H, item_dim)}\n",
    "        '''\n",
    "        self.empty_history_flag = params['empty_history'] if 'empty_history' not in params else True\n",
    "        BS = params['batch_size']\n",
    "        observation = {'batch_size': BS}\n",
    "        if 'sample' in params:\n",
    "            sample_info = params['sample']\n",
    "        else:\n",
    "            self.iter = iter(DataLoader(self.reader, batch_size = BS, shuffle = True, \n",
    "                                        pin_memory = True, num_workers = self.n_worker))\n",
    "            sample_info = next(self.iter)\n",
    "            sample_info = wrap_batch(sample_info, device = self.user_response_model.device)\n",
    "        self.current_observation = {\n",
    "            'user_profile': sample_info['user_profile'],  # (B, user_dim)\n",
    "            'history': sample_info['history'],  # (B, H)\n",
    "            'history_features': sample_info['history_features'], # (B, H, item_dim)\n",
    "            'cummulative_reward': torch.zeros(BS).to(self.user_response_model.device),\n",
    "            'min_reward': torch.full((BS,), float('inf'), device=self.user_response_model.device),\n",
    "            'temper': torch.ones(BS).to(self.user_response_model.device) * self.initial_temper,\n",
    "            'step': torch.zeros(BS).to(self.user_response_model.device),\n",
    "        }\n",
    "        self.reward_history = [0.]\n",
    "        self.step_history = [0.]\n",
    "        return copy.deepcopy(self.current_observation)\n",
    "        \n",
    "    \n",
    "    def step(self, step_dict):\n",
    "        '''\n",
    "        @input:\n",
    "        - step_dict: {'action': (B, slate_size),\n",
    "                        'action_features': (B, slate_size, item_dim) }\n",
    "        '''\n",
    "        # actions (exposures)\n",
    "        action = step_dict['action'] # (B, slate_size), should be item ids only\n",
    "        action_features = step_dict['action_features']\n",
    "        batch_data = {\n",
    "            'user_profile': self.current_observation['user_profile'],\n",
    "            'history_features': self.current_observation['history_features'],\n",
    "            'exposure_features': action_features\n",
    "        }\n",
    "        # URM forward\n",
    "        with torch.no_grad():\n",
    "            output_dict = self.user_response_model(batch_data)\n",
    "            response = torch.bernoulli(output_dict['probs']) # (B, slate_size)\n",
    "#             prob_scale = (self.current_observation['temper'].clone().detach().view(-1,1) + self.temper_prob_lag) / (self.initial_temper + self.temper_prob_lag)\n",
    "            probs_under_temper = output_dict['probs'] # * prob_scale\n",
    "            response = torch.bernoulli(probs_under_temper).detach() # (B, slate_size)\n",
    "\n",
    "            # reward (B,)\n",
    "            immediate_reward = self.reward_func(response).detach()\n",
    "            # immediate_reward = -torch.abs(immediate_reward - self.temper_sweet_point) + 1\n",
    "            self.current_observation['min_reward'] = torch.min(immediate_reward, self.current_observation['min_reward'])\n",
    "\n",
    "            # (B, H+slate_size)\n",
    "            H_prime = torch.cat((self.current_observation['history'], action), dim = 1) \n",
    "            # (B, H+slate_size, item_dim)\n",
    "            H_prime_features = torch.cat((self.current_observation['history_features'], action_features), dim = 1) \n",
    "            # (B, H+slate_size)\n",
    "            F_prime = torch.cat((torch.ones_like(self.current_observation['history']), response), dim = 1).to(torch.long) \n",
    "            # vector, vector\n",
    "            row_indices, col_indices = (F_prime == 1).nonzero(as_tuple=True) \n",
    "            # (B,), the number of positive iteraction as history length\n",
    "            L = F_prime.sum(dim = 1) \n",
    "            \n",
    "            # user history update\n",
    "            offset = 0\n",
    "            newH = torch.zeros_like(self.current_observation['history'])\n",
    "            newH_features = torch.zeros_like(self.current_observation['history_features'])\n",
    "            for row_id in range(action.shape[0]):\n",
    "                right = offset + L[row_id]\n",
    "                left = right - self.reader.max_seq_len\n",
    "                newH[row_id] = H_prime[row_id, col_indices[left:right]]\n",
    "                newH_features[row_id] = H_prime_features[row_id,col_indices[left:right],:]\n",
    "                offset += L[row_id]\n",
    "            self.current_observation['history'] = newH\n",
    "            self.current_observation['history_features'] = newH_features\n",
    "            self.current_observation['cummulative_reward'] += immediate_reward\n",
    "\n",
    "            # temper update for leave model\n",
    "            temper_down = (-immediate_reward+1) * response.shape[1] + 1\n",
    "            self.current_observation['temper'] -= temper_down\n",
    "            # leave signal\n",
    "            done_mask = self.current_observation['temper'] < 1\n",
    "            # step update\n",
    "            self.current_observation['step'] += 1\n",
    "\n",
    "            # update rows where user left\n",
    "#             refresh_rows = done_mask.nonzero().view(-1)\n",
    "#             print(f\"#refresh: {refresh_rows}\")\n",
    "            if done_mask.sum() > 0:\n",
    "                final_rewards = self.current_observation['cummulative_reward'][done_mask].detach().cpu().numpy()\n",
    "                final_steps = self.current_observation['step'][done_mask].detach().cpu().numpy()\n",
    "                self.reward_history.append(final_rewards[-1])\n",
    "                self.step_history.append(final_steps[-1])\n",
    "                # sample new users to fill in the blank\n",
    "                new_sample_flag = False\n",
    "                try:\n",
    "                    sample_info = next(self.iter)\n",
    "                    if sample_info['user_profile'].shape[0] != done_mask.shape[0]:\n",
    "                        new_sample_flag = True\n",
    "                except:\n",
    "                    new_sample_flag = True\n",
    "                if new_sample_flag:\n",
    "                    self.iter = iter(DataLoader(self.reader, batch_size = done_mask.shape[0], shuffle = True, \n",
    "                                                pin_memory = True, num_workers = params['n_worker']))\n",
    "                    sample_info = next(self.iter)\n",
    "                sample_info = wrap_batch(sample_info, device = self.user_response_model.device)\n",
    "                for obs_key in ['user_profile', 'history', 'history_features']:\n",
    "                    self.current_observation[obs_key][done_mask] = sample_info[obs_key][done_mask]\n",
    "                self.current_observation['cummulative_reward'][done_mask] *= 0\n",
    "                self.current_observation['min_reward'][done_mask] = float('inf')\n",
    "                self.current_observation['temper'][done_mask] *= 0\n",
    "                self.current_observation['temper'][done_mask] += self.initial_temper\n",
    "            self.current_observation['step'][done_mask] *= 0\n",
    "#         print(f\"step: {self.current_observation['step']}\")\n",
    "        return copy.deepcopy(self.current_observation), immediate_reward, done_mask, {'response': response}\n",
    "    \n",
    "    def stop(self):\n",
    "        self.iter = None\n",
    "    \n",
    "    def get_new_iterator(self, B):\n",
    "        return iter(DataLoader(self.reader, batch_size = B, shuffle = True, \n",
    "                               pin_memory = True, num_workers = params['n_worker']))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eaa5d5a2",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:36.990670Z",
     "iopub.status.busy": "2025-07-10T12:48:36.990359Z",
     "iopub.status.idle": "2025-07-10T12:48:37.000359Z",
     "shell.execute_reply": "2025-07-10T12:48:36.999829Z"
    },
    "id": "3BvTCi5yZvxS",
    "papermill": {
     "duration": 0.245173,
     "end_time": "2025-07-10T12:48:37.001463",
     "exception": false,
     "start_time": "2025-07-10T12:48:36.756290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Self-Attentive Sequential Recommendation\n",
    "\n",
    "class SASRec(nn.Module):\n",
    "  def __init__(self, environment, params):\n",
    "    super().__init__()\n",
    "    self.n_layer = params['sasrec_n_layer']\n",
    "    self.d_model = params['sasrec_d_model']\n",
    "    self.n_head = params['sasrec_n_head']\n",
    "    self.dropout_rate = params['sasrec_dropout']\n",
    "    self.d_forward = params['sasrec_d_forward']\n",
    "\n",
    "    # item space\n",
    "    self.item_space = environment.action_space['item_id'][1]\n",
    "    self.item_dim = environment.action_space['item_feature'][1]\n",
    "    self.maxlen = environment.observation_space['history'][1]\n",
    "    self.state_dim = self.d_model\n",
    "    self.action_dim = self.d_model\n",
    "\n",
    "    # policy network modules\n",
    "    self.item_map = nn.Linear(self.item_dim, self.d_model)\n",
    "    self.pos_emb = nn.Embedding(self.maxlen, self.d_model)\n",
    "    self.pos_emb_getter = torch.arange(self.maxlen, dtype = torch.long)\n",
    "    self.emb_dropout = nn.Dropout(self.dropout_rate)\n",
    "    self.emb_norm = nn.LayerNorm(self.d_model)\n",
    "    self.attn_mask = ~torch.tril(torch.ones((self.maxlen, self.maxlen), dtype=torch.bool))\n",
    "    encoder_layer = nn.TransformerEncoderLayer(d_model=self.d_model,\n",
    "                                               nhead=self.n_head,\n",
    "                                               dim_feedforward= self.d_forward,\n",
    "                                               dropout=self.dropout_rate,\n",
    "                                               batch_first = True\n",
    "                                               )\n",
    "    self.transformer = nn.TransformerEncoder(encoder_layer= encoder_layer,\n",
    "                                             num_layers = self.n_layer)\n",
    "\n",
    "  def score(self, action_emb, item_emb, do_softmax=True):\n",
    "    item_emb = self.item_map(item_emb)\n",
    "    output = dot_scorer(action_emb, item_emb, self.d_model)\n",
    "    if do_softmax:\n",
    "      return torch.softmax(output, dim=-1)\n",
    "    else:\n",
    "      return output\n",
    "\n",
    "  def get_scorer_parameters(self):\n",
    "    return self.item_map.parameters()\n",
    "\n",
    "  def encode_state(self, feed_dict):\n",
    "    user_history = feed_dict['history_features']\n",
    "    # (1, H, d_model)\n",
    "    # for item in feed_dict.items():\n",
    "    #   print(item)\n",
    "    # print(\"user_history device:\", user_history.device)\n",
    "    # print(\"self.pos_emb_getter device:\", self.pos_emb_getter.device)\n",
    "    # print(\"self.pos_emb device\", self.pos_emb.device)\n",
    "\n",
    "    pos_emb = self.pos_emb(self.pos_emb_getter.to(user_history.device)).view(1, self.maxlen, self.d_model)\n",
    "\n",
    "    # (B, H, d_model)\n",
    "    history_item_emb = self.item_map(user_history).view(-1, self.maxlen, self.d_model)\n",
    "    history_item_emb = self.emb_norm(self.emb_dropout(history_item_emb + pos_emb))\n",
    "\n",
    "    # (B, H, d_model)\n",
    "    output_seq = self.transformer(history_item_emb, mask = self.attn_mask.to(user_history.device))\n",
    "\n",
    "    return {'output_seq': output_seq, 'state_emb': output_seq[:, -1, :]}\n",
    "\n",
    "  def forward(self, feed_dict):\n",
    "    '''\n",
    "    @input\n",
    "    - feed_dict: {'user_profile': (B, user_dim),\n",
    "                  'history_features': (B, H, item_dim),\n",
    "                  'history_mask': (B),\n",
    "                  'candicate_features': (B, L, item_dim) or (1, L, item_dim)\n",
    "                  }\n",
    "    @model\n",
    "    - user_profile --> user_emb (B, 1, f_dim)\n",
    "    - hisotry_items --> history_item_emb (B, H, f_dim)\n",
    "    - (Q:user_emb, K&V: history_item_emb) --(multi-head attn) --> user_state(B, 1, feature_dim)\n",
    "    - user_state --> action_prob (B, n_item)\n",
    "    '''\n",
    "    hist_enc = self.encode_state(feed_dict)\n",
    "\n",
    "    # user embedding (B, 1, d_model)\n",
    "    user_state = hist_enc['state_emb'].view(-1, self.d_model)\n",
    "\n",
    "    # action embedding (B, d_model)\n",
    "    action_emb = user_state\n",
    "\n",
    "    # regularization\n",
    "    reg = get_regularization(self.item_map, self.transformer)\n",
    "\n",
    "    out_dict = {\n",
    "        'action_emb': action_emb,\n",
    "        'state_emb': user_state,\n",
    "        'seq_emb': hist_enc['output_seq'],\n",
    "        'reg': reg\n",
    "    }\n",
    "    return out_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d93e9510",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:37.472063Z",
     "iopub.status.busy": "2025-07-10T12:48:37.471266Z",
     "iopub.status.idle": "2025-07-10T12:48:37.476441Z",
     "shell.execute_reply": "2025-07-10T12:48:37.475913Z"
    },
    "id": "Dz4XwAAtzx1d",
    "papermill": {
     "duration": 0.240056,
     "end_time": "2025-07-10T12:48:37.477537",
     "exception": false,
     "start_time": "2025-07-10T12:48:37.237481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# @title General Critic class\n",
    "class GeneralCritic(nn.Module):\n",
    "  def __init__(self, policy, params):\n",
    "    super().__init__()\n",
    "    self.state_dim = policy.state_dim\n",
    "    self.action_dim = policy.action_dim\n",
    "    self.net = DNN(self.state_dim + self.action_dim, params['critic_hidden_dims'], 1,\n",
    "                   dropout_rate=params['critic_dropout_rate'], do_batch_norm=True)\n",
    "\n",
    "  def forward(self, feed_dict):\n",
    "    '''\n",
    "    @input:\n",
    "    - feed_dict: {'state_emb': (B, state_dim), 'action_emb': (B, action_dim)}\n",
    "    '''\n",
    "    state_emb = feed_dict['state_emb']\n",
    "    action_emb = feed_dict['action_emb'].view(-1, self.action_dim)\n",
    "\n",
    "    Q = self.net(torch.cat((state_emb, action_emb), dim = -1)).view(-1)\n",
    "\n",
    "    reg = get_regularization(self.net)\n",
    "    return {'q': Q, 'reg': reg}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5695f2bb",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:38.006847Z",
     "iopub.status.busy": "2025-07-10T12:48:38.006568Z",
     "iopub.status.idle": "2025-07-10T12:48:38.029005Z",
     "shell.execute_reply": "2025-07-10T12:48:38.028449Z"
    },
    "id": "Jd56qLlk99ge",
    "papermill": {
     "duration": 0.31421,
     "end_time": "2025-07-10T12:48:38.030156",
     "exception": false,
     "start_time": "2025-07-10T12:48:37.715946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title One Stage Facade\n",
    "class OneStageFacade():\n",
    "  def __init__(self, environment, actor, critic, params):\n",
    "    super().__init__()\n",
    "    self.device = device\n",
    "    self.env = environment\n",
    "    self.actor = actor\n",
    "    self.critic = critic\n",
    "\n",
    "    self.slate_size = params['slate_size']\n",
    "    self.noise_var = params['noise_var']\n",
    "    self.noise_decay = params['noise_var'] / params['n_iter'][-1]\n",
    "    self.q_laplace_smoothness = params['q_laplace_smoothness']\n",
    "    self.topk_rate = params['topk_rate']\n",
    "    self.empty_start_rate = params['empty_start_rate']\n",
    "\n",
    "    self.n_item = self.env.action_space['item_id'][1]\n",
    "\n",
    "    # (N)\n",
    "    self.candidate_iids = np.arange(1, self.n_item + 1)\n",
    "\n",
    "    # (N, item_dim)\n",
    "    self.candidate_features = torch.FloatTensor(\n",
    "        self.env.reader.get_item_list_meta(self.candidate_iids)).to(self.device)\n",
    "    self.candidate_iids = torch.tensor(self.candidate_iids).to(self.device)\n",
    "\n",
    "    # replay buffer is initialized in initialize_train()\n",
    "    self.buffer_size = params['buffer_size']\n",
    "    self.start_timestamp = params['start_timestamp']\n",
    "\n",
    "  def initialize_train(self):\n",
    "    '''\n",
    "    Procedures before training\n",
    "    '''\n",
    "    self.buffer = {\n",
    "        \"user_profile\": torch.zeros(self.buffer_size, self.env.reader.portrait_len),\n",
    "        \"history\":torch.zeros(self.buffer_size, self.env.reader.max_seq_len).to(torch.long),\n",
    "        \"next_history\":torch.zeros(self.buffer_size, self.env.reader.max_seq_len).to(torch.long),\n",
    "        \"state_emb\": torch.zeros(self.buffer_size, self.actor.state_dim),\n",
    "        \"action_emb\":torch.zeros(self.buffer_size, self.actor.action_dim),\n",
    "        \"action\":torch.zeros(self.buffer_size, self.slate_size, dtype=torch.long),\n",
    "        \"reward\":torch.zeros(self.buffer_size),\n",
    "        \"min_reward\": torch.zeros(self.buffer_size),\n",
    "        \"feedback\": torch.zeros(self.buffer_size, self.slate_size),\n",
    "        \"done\": torch.zeros(self.buffer_size, dtype=torch.bool)\n",
    "    }\n",
    "\n",
    "    for k, v in self.buffer.items():\n",
    "      self.buffer[k] = v.to(self.device)\n",
    "    self.buffer_head = 0\n",
    "    self.current_buffer_size = 0\n",
    "    self.n_stream_record = 0\n",
    "    self.is_training_available = False\n",
    "\n",
    "  def reset_env(self, initial_params = {'batch_size': 1}):\n",
    "    '''\n",
    "    Reset user response environment\n",
    "    '''\n",
    "    initial_params['empty_history'] = True if np.random.rand() < self.empty_start_rate else False\n",
    "    initial_observation = self.env.reset(initial_params)\n",
    "    return initial_observation\n",
    "\n",
    "  def env_step(self, policy_output):\n",
    "    action_dict = {\n",
    "      'action': policy_output['action'],\n",
    "      'action_features': policy_output['action_features']\n",
    "    }\n",
    "    observation, reward, done, info = self.env.step(action_dict)\n",
    "    return observation, reward, done, info\n",
    "\n",
    "  def stop_env(self):\n",
    "    self.env.stop()\n",
    "\n",
    "  def get_episode_report(self, n_recent = 10):\n",
    "    recent_rewards = self.env.reward_history[-n_recent:]\n",
    "    recent_steps = self.env.step_history[-n_recent:]\n",
    "    epsiode_report = {\n",
    "        'average_total_reward': np.mean(recent_rewards),\n",
    "        'reward_variance': np.var(recent_rewards),\n",
    "        'max_total_reward': np.max(recent_rewards),\n",
    "        'min_total_reward': np.min(recent_rewards),\n",
    "        'average_n_step': np.mean(recent_steps),\n",
    "        'max_n_step': np.max(recent_steps),\n",
    "        'min_n_step': np.min(recent_steps),\n",
    "        'buffer_size': self.current_buffer_size\n",
    "    }\n",
    "    return epsiode_report\n",
    "\n",
    "  def apply_critic(self, observation, policy_output, critic_model):\n",
    "    feed_dict = {\n",
    "        'state_emb': policy_output['state_emb'],\n",
    "        'action_emb': policy_output['action_emb']\n",
    "    }\n",
    "    critic_output = critic_model(feed_dict)\n",
    "    return critic_output\n",
    "\n",
    "  def apply_policy(self, observation, policy_model, epsilon = 0, \n",
    "                 do_explore = False, do_softmax = True):\n",
    "    '''\n",
    "    @input:\n",
    "    - observation: input of policy model\n",
    "    - policy_model\n",
    "    - epsilon: greedy epsilon, effective only when do_explore == True\n",
    "    - do_explore: exploration flag, True if adding noise to action\n",
    "    - do_softmax: output softmax score\n",
    "    '''\n",
    "#         feed_dict = utils.wrap_batch(observation, device = self.device)\n",
    "    feed_dict = observation\n",
    "    out_dict = policy_model(feed_dict)\n",
    "    if do_explore:\n",
    "        action_emb = out_dict['action_emb']\n",
    "        # sampling noise of action embedding\n",
    "        if np.random.rand() < epsilon:\n",
    "            action_emb = torch.clamp(torch.rand_like(action_emb)*self.noise_var, -1, 1)\n",
    "        else:\n",
    "            action_emb = action_emb + torch.clamp(torch.rand_like(action_emb)*self.noise_var, -1, 1)\n",
    "#                 self.noise_var -= self.noise_decay\n",
    "        out_dict['action_emb'] = action_emb\n",
    "        \n",
    "    if 'candidate_ids' in feed_dict:\n",
    "        # (B, L, item_dim)\n",
    "        out_dict['candidate_features'] = feed_dict['candidate_features']\n",
    "        # (B, L)\n",
    "        out_dict['candidate_ids'] = feed_dict['candidate_ids']\n",
    "        batch_wise = True\n",
    "    else:\n",
    "        # (1,L,item_dim)\n",
    "        out_dict['candidate_features'] = self.candidate_features.unsqueeze(0)\n",
    "        # (L,)\n",
    "        out_dict['candidate_ids'] = self.candidate_iids\n",
    "        batch_wise = False\n",
    "        \n",
    "    # action prob (B,L)\n",
    "    action_prob = policy_model.score(out_dict['action_emb'], \n",
    "                                     out_dict['candidate_features'], \n",
    "                                     do_softmax = do_softmax)\n",
    "\n",
    "    # two types of greedy selection\n",
    "    if np.random.rand() >= self.topk_rate:\n",
    "        # greedy random: categorical sampling\n",
    "        action, indices = utils.sample_categorical_action(action_prob, out_dict['candidate_ids'], \n",
    "                                                          self.slate_size, with_replacement = False, \n",
    "                                                          batch_wise = batch_wise, return_idx = True)\n",
    "    else:\n",
    "        # indices on action_prob\n",
    "        _, indices = torch.topk(action_prob, k = self.slate_size, dim = 1)\n",
    "        # topk action\n",
    "        if batch_wise:\n",
    "            action = torch.gather(out_dict['candidate_ids'], 1, indices).detach() # (B, slate_size)\n",
    "        else:\n",
    "            action = out_dict['candidate_ids'][indices].detach() # (B, slate_size)\n",
    "    # (B,K)\n",
    "    out_dict['action'] = action \n",
    "    # (B,K,item_dim)\n",
    "    out_dict['action_features'] = self.candidate_features[action-1]\n",
    "    # (B,K)\n",
    "    out_dict['action_prob'] = torch.gather(action_prob, 1, indices) \n",
    "    # (B,L)\n",
    "    out_dict['candidate_prob'] = action_prob\n",
    "    return out_dict\n",
    "\n",
    "  def sample_buffer(self, batch_size):\n",
    "    '''\n",
    "    @output:\n",
    "    - observation\n",
    "    - policy output\n",
    "    - reward\n",
    "    - done_mask\n",
    "    - next_observation\n",
    "    '''\n",
    "    indices = np.random.randint(0, self.current_buffer_size, size = batch_size)\n",
    "    U, H, N, S, HA, A, R, F, D, MR = self.read_buffer(indices)\n",
    "    observation = {\n",
    "        'user_profile': U,\n",
    "        'history_features': H,\n",
    "        'min_reward': MR\n",
    "    }\n",
    "    policy_output = {\n",
    "        'state_emb': S,\n",
    "        'action_emb': HA,\n",
    "        'action': A\n",
    "    }\n",
    "    reward = R\n",
    "    done_mask = D\n",
    "    next_observation = {\n",
    "        'user_profile': U,\n",
    "        'history_features': N,\n",
    "        'min_reward': MR,\n",
    "        'previous_feedback': F\n",
    "    }\n",
    "    return observation, policy_output, reward, done_mask, next_observation\n",
    "\n",
    "  # def sample_raw_data(self, batch_size):\n",
    "  #   '''\n",
    "  #   Sample supervise data from raw training data\n",
    "  #   '''\n",
    "  #   batch = self.env.sample_user(batch_size)\n",
    "\n",
    "  def update_buffer(self, observation, policy_output, reward, done_mask,\n",
    "                    next_observation, info):\n",
    "    # Overwrite old entries in buffer\n",
    "    if self.buffer_head + reward.shape[0] >= self.buffer_size:\n",
    "      tail = self.buffer_size - self.buffer_head\n",
    "      indices = [self.buffer_head + i for i in range(tail)] + \\\n",
    "       [i for i in range(reward.shape[0] - tail)]\n",
    "    else:\n",
    "      indices = [self.buffer_head  + i for i in range(reward.shape[0])]\n",
    "\n",
    "    # update buffer\n",
    "    self.buffer[\"user_profile\"][indices] = observation['user_profile']\n",
    "    self.buffer[\"history\"][indices] = observation['history']\n",
    "    self.buffer[\"min_reward\"][indices] = observation['min_reward']\n",
    "    self.buffer[\"next_history\"][indices] = next_observation['history']\n",
    "    self.buffer[\"state_emb\"][indices] = policy_output['state_emb']\n",
    "    self.buffer[\"action\"][indices] = policy_output['action']\n",
    "    self.buffer[\"action_emb\"][indices] = policy_output['action_emb']\n",
    "    self.buffer[\"reward\"][indices] = reward\n",
    "    self.buffer[\"feedback\"][indices] = info['response']\n",
    "    self.buffer[\"done\"][indices] = done_mask\n",
    "\n",
    "    # update buffer pointer\n",
    "    self.buffer_head = (self.buffer_head + reward.shape[0]) % self.buffer_size\n",
    "    self.n_stream_record += reward.shape[0]\n",
    "    self.current_buffer_size = min(self.n_stream_record, self.buffer_size)\n",
    "\n",
    "    # available training when sufficient sample buffer\n",
    "    if self.n_stream_record >= self.start_timestamp:\n",
    "      self.is_training_available = True\n",
    "  def read_buffer(self, indices):\n",
    "    U = self.buffer['user_profile'][indices]\n",
    "    # (L, item_dim)\n",
    "    H = self.candidate_features[self.buffer[\"history\"][indices] - 1]\n",
    "    N = self.candidate_features[self.buffer[\"next_history\"][indices] - 1]\n",
    "    S = self.buffer[\"state_emb\"][indices]\n",
    "    HA = self.buffer[\"action_emb\"][indices]\n",
    "    A = self.buffer[\"action\"][indices]\n",
    "    R = self.buffer[\"reward\"][indices]\n",
    "    F = self.buffer[\"feedback\"][indices]\n",
    "    D = self.buffer[\"done\"][indices]\n",
    "    MR = self.buffer['min_reward'][indices]\n",
    "    return U, H, N, S, HA, A, R, F, D, MR\n",
    "\n",
    "  def extract_behavior_data(self, observation, policy_output, next_observation):\n",
    "    '''\n",
    "    Extract supervised data from RL samples\n",
    "    '''\n",
    "    observation = {\n",
    "        \"user_profile\": observation['user_profile'],\n",
    "        \"history_features\": observation['history_features']\n",
    "    }\n",
    "    exposed_items = policy_output['action']\n",
    "    exposure = {\n",
    "        \"ids\": exposed_items,\n",
    "        \"features\": self.candidate_features[exposed_items - 1]\n",
    "    }\n",
    "    user_feedback = next_observation[\"previous_feedback\"]\n",
    "    return observation, exposure, user_feedback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4c6582ea",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:38.502475Z",
     "iopub.status.busy": "2025-07-10T12:48:38.502182Z",
     "iopub.status.idle": "2025-07-10T12:48:38.511498Z",
     "shell.execute_reply": "2025-07-10T12:48:38.510927Z"
    },
    "id": "_H8nHNkrZdnk",
    "papermill": {
     "duration": 0.247641,
     "end_time": "2025-07-10T12:48:38.512503",
     "exception": false,
     "start_time": "2025-07-10T12:48:38.264862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title One Stage Facade with Hyper Action\n",
    "\n",
    "class OneStageFacade_HyperAction(OneStageFacade):\n",
    "  def __init__(self, environment, actor, critic, params):\n",
    "    super().__init__(environment, actor, critic, params)\n",
    "\n",
    "  def apply_policy(self, observation, policy_model, epsilon = 0,\n",
    "                   do_explore = False, do_softmax = True):\n",
    "    feed_dict = wrap_batch(observation, device=device)\n",
    "    # print(feed_dict.device)\n",
    "    out_dict = policy_model(feed_dict)\n",
    "    if do_explore:\n",
    "      action_emb = out_dict['action_emb']\n",
    "      # explore and exploit + clamping\n",
    "      if np.random.rand() < epsilon:\n",
    "        action_emb = torch.clamp(torch.rand_like(action_emb) * self.noise_var, -1, 1)\n",
    "      else:\n",
    "        action_emb = action_emb + torch.clamp(torch.rand_like(action_emb) * self.noise_var, -1, 1)\n",
    "\n",
    "      out_dict['action_emb'] = action_emb\n",
    "\n",
    "    # Z latent space\n",
    "    out_dict['Z'] = out_dict['action_emb']\n",
    "\n",
    "    if 'candidate_ids' in feed_dict:\n",
    "      # (B, L, item_dim)\n",
    "      out_dict['candidate_features']  = feed_dict['candidate_features']\n",
    "      # (B, L)\n",
    "      out_dict['candidate_ids'] = feed_dict['candidate_ids']\n",
    "      batch_wise = True\n",
    "    else:\n",
    "      # (1, L, item_dim)\n",
    "      out_dict['candidate_features'] = self.candidate_features.unsqueeze(0)\n",
    "      #(L, )\n",
    "      out_dict['candidate_ids'] = self.candidate_iids\n",
    "      batch_wise = False\n",
    "\n",
    "    # action pron (B, L)\n",
    "    action_prob = policy_model.score(out_dict['action_emb'],\n",
    "                                      out_dict['candidate_features'],\n",
    "                                      do_softmax=do_softmax)\n",
    "\n",
    "    # two types of greedy selection\n",
    "    if np.random.rand() >= self.topk_rate:\n",
    "      # greedy random\n",
    "      action, indices = sample_categorical_action(action_prob, out_dict['candidate_ids'],\n",
    "                                                  self.slate_size, with_replacement=False,\n",
    "                                                  batch_wise=batch_wise,\n",
    "                                                  return_idx=True)\n",
    "    else:\n",
    "      # indices on action_prob\n",
    "      _, indices = torch.topk(action_prob, k = self.slate_size, dim = 1)\n",
    "      # print(indices.shape)\n",
    "      # print(self.candidate_features.shape)\n",
    "      # top k action:\n",
    "      # (B, slate_size)\n",
    "      if batch_wise:\n",
    "        action = torch.gather(out_dict['candidate_ids'], 1, indices).detach()\n",
    "      else:\n",
    "        action = out_dict['candidate_ids'][indices].detach()\n",
    "\n",
    "    # (B, K)\n",
    "    out_dict['action'] = action\n",
    "    # (B, K, item_dim)\n",
    "    out_dict['action_features'] = self.candidate_features[indices]\n",
    "    # (B, K)\n",
    "    out_dict['action_prob'] = torch.gather(action_prob, 1, indices)\n",
    "    # (B, L)\n",
    "    out_dict['candidate_prob'] = action_prob\n",
    "\n",
    "    return out_dict\n",
    "\n",
    "  def infer_hyper_action(self, observation, policy_output, actor):\n",
    "    '''\n",
    "    Inverse function A -> Z\n",
    "    '''\n",
    "    # (B, K)\n",
    "    A = policy_output['action']\n",
    "\n",
    "    # (B, K, item_dim)\n",
    "    item_embs = self.candidate_features[A - 1]\n",
    "\n",
    "    # (B, K, kernel_dim)\n",
    "    Z = torch.mean(actor.item_map(item_embs).view(A.shape[0], A.shape[1], -1), dim = 1)\n",
    "    return {\n",
    "        'Z': Z,\n",
    "        'action_emb': Z,\n",
    "        'state_emb': policy_output['state_emb']\n",
    "    }\n",
    "\n",
    "  def apply_critic(self, observation, policy_output, critic_model):\n",
    "    feed_dict = {\n",
    "        'state_emb': policy_output['state_emb'],\n",
    "        'action_emb': policy_output['action_emb']\n",
    "    }\n",
    "    critic_output = critic_model(feed_dict)\n",
    "    return critic_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cbd06e5a",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:38.990301Z",
     "iopub.status.busy": "2025-07-10T12:48:38.990032Z",
     "iopub.status.idle": "2025-07-10T12:48:39.000901Z",
     "shell.execute_reply": "2025-07-10T12:48:39.000323Z"
    },
    "id": "wJKb3K_326B5",
    "papermill": {
     "duration": 0.255359,
     "end_time": "2025-07-10T12:48:39.001941",
     "exception": false,
     "start_time": "2025-07-10T12:48:38.746582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Base RL Agent\n",
    "\n",
    "\n",
    "\n",
    "class BaseRLAgent():\n",
    "  def __init__(self, facade, params):\n",
    "    self.device = params['device']\n",
    "    self.gamma = params['gamma']\n",
    "    self.n_iter = [0] + params['n_iter']\n",
    "    self.train_every_n_step = params['train_every_n_step']\n",
    "    self.check_episode = params['check_episode']\n",
    "    self.save_path = params['save_path']\n",
    "    self.facade = facade\n",
    "    self.check_episode = params['check_episode']\n",
    "    self.exploration_scheduler = LinearScheduler(int(sum(self.n_iter) * params['elbow_greedy']),\n",
    "                                                 params['final_greedy_epsilon'],\n",
    "                                                 params['initial_greedy_epsilon'])\n",
    "    # if len(self.n_iter) == 2:\n",
    "    #   with open(self.save_path + \".report\", 'w') as outfile:\n",
    "    #     outfile.write()\n",
    "\n",
    "  def train(self):\n",
    "    if len(self.n_iter) > 2:\n",
    "      self.load()\n",
    "\n",
    "    t = time()\n",
    "    start_time = t\n",
    "    print(\"Run procedure before training\")\n",
    "    self.action_before_train()\n",
    "\n",
    "    print(\"Start training\")\n",
    "    observation = self.facade.reset_env({\n",
    "        'batch_size': self.episode_batch_size,\n",
    "    })\n",
    "    step_offset = sum(self.n_iter[:-1])\n",
    "    for i in tqdm(range(step_offset, step_offset + self.n_iter[-1])):\n",
    "      observation = self.run_episode_step(i, self.exploration_scheduler.value(i),\n",
    "                                          observation, True)\n",
    "      if i % self.train_every_n_step == 0:\n",
    "        self.step_train()\n",
    "\n",
    "      if i % self.check_episode == 0:\n",
    "        t_ = time()\n",
    "        # print(f\"Episode step {i}, time diff {t_ - t}, total time dif {t - start_time})\")\n",
    "        self.log_iteration(i)\n",
    "        t = t_\n",
    "        if i % (3*self.check_episode) == 0:\n",
    "            self.save()\n",
    "\n",
    "    self.action_after_train()\n",
    "\n",
    "\n",
    "  def action_before_train(self):\n",
    "    pass\n",
    "\n",
    "  def action_after_train(self):\n",
    "    self.facade.stop_env()\n",
    "\n",
    "\n",
    "  def get_report(self):\n",
    "    episode_report = self.facade.get_episode_report(10)\n",
    "    train_report = {k: np.mean(v[-10:]) for k, v in self.training_history.items()}\n",
    "    return episode_report, train_report\n",
    "\n",
    "  def log_iteration(self, step):\n",
    "    episode_report, train_report = self.get_report()\n",
    "    run.log(episode_report | train_report)\n",
    "    log_str = f\"step: {step} @ episode report: {episode_report} @ step loss: {train_report}\\n\"\n",
    "    with open(self.save_path + \".report\", 'a') as outfile:\n",
    "        outfile.write(log_str)\n",
    "    return log_str\n",
    "\n",
    "  def test(self):\n",
    "    self.load()\n",
    "    self.facade.initialize_train()\n",
    "\n",
    "    t = time()\n",
    "    start_time = t\n",
    "\n",
    "    print(\"Start testing\")\n",
    "    observation = self.facade.reset_env({\n",
    "        'batch_size': self.episode_batch_size,\n",
    "    })\n",
    "    step_offset = sum(self.n_iter[:-1])\n",
    "    with torch.no_grad():\n",
    "        for i in tqdm(range(step_offset, step_offset + self.n_iter[-1])):\n",
    "          observation = self.run_episode_step(i, self.exploration_scheduler.value(i),\n",
    "                                              observation, True)\n",
    "          if i % self.check_episode == 0:\n",
    "            t_ = time()\n",
    "            episode_report = self.facade.get_episode_report(10)\n",
    "            log_str = f\"step: {i} @ episode report: {episode_report}\\n\"\n",
    "            run.log(episode_report)\n",
    "            with open(self.save_path + \"_eval.report\", 'a') as outfile:\n",
    "              outfile.write(log_str)\n",
    "            # print(f\"Episode step {i}, time diff {t_ - t}, total time dif {t - start_time})\")\n",
    "            # print(log_str)\n",
    "            t = t_\n",
    "    \n",
    "\n",
    "  #######################################\n",
    "  #           Abstract function         #\n",
    "  #######################################\n",
    "  def run_episode_step(self, *episode_args):\n",
    "    pass\n",
    "\n",
    "  def step_train(self):\n",
    "    pass\n",
    "\n",
    "  def save(self):\n",
    "    pass\n",
    "\n",
    "  def load(self):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c868ab90",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:39.527095Z",
     "iopub.status.busy": "2025-07-10T12:48:39.526810Z",
     "iopub.status.idle": "2025-07-10T12:48:39.541920Z",
     "shell.execute_reply": "2025-07-10T12:48:39.541194Z"
    },
    "id": "VBbJXf-KfvDA",
    "papermill": {
     "duration": 0.250904,
     "end_time": "2025-07-10T12:48:39.542973",
     "exception": false,
     "start_time": "2025-07-10T12:48:39.292069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# @title Deep Deterministic Policy Gradient\n",
    "\n",
    "\n",
    "class DDPG(BaseRLAgent):\n",
    "  def __init__(self, facade, params):\n",
    "    super().__init__(facade, params)\n",
    "    self.actor = facade.actor\n",
    "    self.actor_target = copy.deepcopy(self.actor)\n",
    "    self.actor_optimizer = torch.optim.Adam(self.actor.parameters(), lr = params['actor_lr'], weight_decay = params['actor_decay'])\n",
    "\n",
    "    self.critic = facade.critic\n",
    "    self.critic_target = copy.deepcopy(self.critic)\n",
    "    self.critic_optimizer = torch.optim.Adam(self.critic.parameters(), lr = params['critic_lr'], weight_decay = params['critic_decay'])\n",
    "\n",
    "    self.episode_batch_size = params['episode_batch_size']\n",
    "    self.tau = params['target_mitigate_coef']\n",
    "    self.actor_lr = params['actor_lr']\n",
    "    self.critic_lr = params['critic_lr']\n",
    "    self.actor_decay = params['actor_decay']\n",
    "    self.critic_decay = params['critic_decay']\n",
    "\n",
    "    self.batch_size = params['batch_size']\n",
    "\n",
    "    with open(self.save_path + \".report\", 'w') as outfile:\n",
    "      pass\n",
    "\n",
    "  def action_before_train(self):\n",
    "    '''\n",
    "    - facade setup\n",
    "      - buffer setup\n",
    "    - run random episodes to build-up the initial buffer\n",
    "    '''\n",
    "    self.facade.initialize_train()\n",
    "    # print(\"Facade Parameters:\")\n",
    "    # for param, value in vars(self.facade).items():\n",
    "    #     print(f\"{param}: {value}\")\n",
    "    prepare_step = 0\n",
    "    # random explore before training\n",
    "    initial_epsilon = 1.0\n",
    "    observation = self.facade.reset_env({\n",
    "        'batch_size': self.episode_batch_size,\n",
    "    })\n",
    "    while not self.facade.is_training_available:\n",
    "      observation = self.run_episode_step(0, initial_epsilon, observation, True)\n",
    "      # print(observation)\n",
    "      prepare_step += 1\n",
    "\n",
    "    # training records\n",
    "    self.training_history = {\"critic_loss\": [], \"actor_loss\": []}\n",
    "\n",
    "    print(f\"Total {prepare_step} prepare steps\")\n",
    "\n",
    "  def run_episode_step(self, *episode_args):\n",
    "    '''\n",
    "    One step of interaction\n",
    "    '''\n",
    "    episode_iter, epsilon, observation, do_buffer_update = episode_args\n",
    "    with torch.no_grad():\n",
    "      # sample action\n",
    "      policy_output = self.facade.apply_policy(observation, self.actor, epsilon,\n",
    "                                               do_explore=True)\n",
    "\n",
    "      # apply action on environment and update replay buffer\n",
    "      next_observation, reward, done, info = self.facade.env_step(policy_output)\n",
    "\n",
    "      # update replay buffer\n",
    "      if do_buffer_update:\n",
    "        self.facade.update_buffer(observation, policy_output, reward, done,\n",
    "                                  next_observation, info)\n",
    "    return next_observation\n",
    "\n",
    "  def step_train(self):\n",
    "    observation , policy_output, reward, done_mask, next_observation = self.facade.sample_buffer(params['batch_size'])\n",
    "      \n",
    "    critic_loss, actor_loss = self.get_ddpg_loss(observation, policy_output, reward,\n",
    "                                                  done_mask, next_observation)\n",
    "    self.training_history[\"critic_loss\"].append(critic_loss.item())\n",
    "    self.training_history[\"actor_loss\"].append(actor_loss.item())\n",
    "\n",
    "    # Update the frozen target models\n",
    "    for param, target_param in zip(self.critic.parameters(), self.critic_target.parameters()):\n",
    "      target_param.data.copy_(self.tau * param.data + (1.0 - self.tau) * target_param.data)\n",
    "\n",
    "    for param, target_param in zip(self.actor.parameters(), self.actor_target.parameters()):\n",
    "      target_param.data.copy_(self.tau * param.data + (1.0 - self.tau) * target_param.data)\n",
    "\n",
    "    return {'step_loss': (self.training_history['actor_loss'][-1],\n",
    "                          self.training_history['critic_loss'][-1])}\n",
    "\n",
    "  def get_ddpg_loss(self, observation, policy_output, reward, done_mask, next_observation,\n",
    "                    do_actor_update = True, do_critic_update = True):\n",
    "    # Get current Q estimate\n",
    "    current_critic_output = self.facade.apply_critic(observation,\n",
    "                                                     wrap_batch(policy_output, device=self.device),\n",
    "                                                     self.critic)\n",
    "    current_Q = current_critic_output['q']\n",
    "\n",
    "    # Compute the target Q value\n",
    "    next_policy_output = self.facade.apply_policy(next_observation, self.actor_target)\n",
    "    target_critic_output = self.facade.apply_critic(next_observation, next_policy_output,\n",
    "                                                    self.critic_target)\n",
    "\n",
    "    target_Q = target_critic_output['q']\n",
    "    target_Q = reward + self.gamma * (done_mask * target_Q).detach()\n",
    "\n",
    "    # compute critic loss\n",
    "    # minimize current_Q predict and target_Q predict\n",
    "    critic_loss = F.mse_loss(current_Q, target_Q).mean()\n",
    "\n",
    "    if do_critic_update and self.critic_lr > 0:\n",
    "      # Optimize the critic\n",
    "      self.critic_optimizer.zero_grad()\n",
    "      critic_loss.backward()\n",
    "      self.critic_optimizer.step()\n",
    "\n",
    "    # compute actor loss\n",
    "    policy_output = self.facade.apply_policy(observation, self.actor)\n",
    "    critic_output = self.facade.apply_critic(observation, policy_output, self.critic)\n",
    "\n",
    "    # Maximize Q value\n",
    "    actor_loss = -critic_output['q'].mean()\n",
    "\n",
    "    if do_actor_update and self.actor_lr > 0:\n",
    "      # Optimize the actor\n",
    "      self.actor_optimizer.zero_grad()\n",
    "      actor_loss.backward()\n",
    "      self.actor_optimizer.step()\n",
    "    return critic_loss, actor_loss\n",
    "\n",
    "  def save(self):\n",
    "    torch.save(self.critic.state_dict(), self.save_path + \"_critic\")\n",
    "    torch.save(self.critic_optimizer.state_dict(), self.save_path + \"_critic_optimizer\")\n",
    "    torch.save(self.actor.state_dict(), self.save_path + \"_actor\")\n",
    "    torch.save(self.actor_optimizer.state_dict(), self.save_path + \"_actor_optimizer\")\n",
    "\n",
    "  def load(self):\n",
    "    self.critic.load_state_dict(torch.load(self.save_path + \"_critic\", map_location=self.device))\n",
    "    self.critic_optimizer.load_state_dict(torch.load(self.save_path + \"_critic_optimizer\", map_location=self.device))\n",
    "    self.critic_target = copy.deepcopy(self.critic)\n",
    "\n",
    "    self.actor.load_state_dict(torch.load(self.save_path + \"_actor\", map_location=self.device))\n",
    "    self.actor_optimizer.load_state_dict(torch.load(self.save_path + \"_actor_optimizer\", map_location=self.device))\n",
    "    self.actor_target = copy.deepcopy(self.actor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "eb50e49e",
   "metadata": {
    "cellView": "form",
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:40.016748Z",
     "iopub.status.busy": "2025-07-10T12:48:40.016439Z",
     "iopub.status.idle": "2025-07-10T12:48:40.031183Z",
     "shell.execute_reply": "2025-07-10T12:48:40.030618Z"
    },
    "id": "HLBYcDpMSfuw",
    "papermill": {
     "duration": 0.253665,
     "end_time": "2025-07-10T12:48:40.032181",
     "exception": false,
     "start_time": "2025-07-10T12:48:39.778516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# @title Hyper - Actor Critic\n",
    "class HAC(DDPG):\n",
    "  def __init__(self, facade, params):\n",
    "    super().__init__(facade, params)\n",
    "    self.behavior_lr = params['behavior_lr']\n",
    "    self.behavior_decay = params['behavior_decay']\n",
    "    self.hyper_actor_coef = params['hyper_actor_coef']\n",
    "    self.actor_behavior_optimizer = torch.optim.Adam(self.actor.parameters(),\n",
    "                                                     lr=params['behavior_lr'],\n",
    "                                                     weight_decay=params['behavior_decay'])\n",
    "\n",
    "  def action_before_train(self):\n",
    "    super().action_before_train()\n",
    "    self.training_history['hyper_actor_loss'] = []\n",
    "    self.training_history['behavior_loss'] = []\n",
    "\n",
    "  def run_episode_step(self, *episode_args):\n",
    "    '''\n",
    "    One step of interaction\n",
    "    '''\n",
    "    episode_iter, epsilon, observation, do_buffer_update = episode_args\n",
    "    with torch.no_grad():\n",
    "      # sample action\n",
    "      policy_output = self.facade.apply_policy(observation, self.actor, epsilon,\n",
    "                                               do_explore=True)\n",
    "\n",
    "      # apply action on environment and update replay buffer\n",
    "      next_observation, reward, done, info = self.facade.env_step(policy_output)\n",
    "\n",
    "      # update replay buffer\n",
    "      if do_buffer_update:\n",
    "        self.facade.update_buffer(observation, policy_output, reward, done,\n",
    "                                  next_observation, info)\n",
    "    return next_observation\n",
    "\n",
    "  def step_train(self):\n",
    "    observation , policy_output, reward, done_mask, next_observation = self.facade.sample_buffer(params['batch_size'])\n",
    "    # reward  = torch.FloatTensor(reward)\n",
    "    # done_mask = torch.FloatTensor(done_mask)\n",
    "\n",
    "    critic_loss, actor_loss, hyper_actor_loss = self.get_hac_loss(observation, policy_output, reward,\n",
    "                                                  done_mask, next_observation)\n",
    "    behavior_loss = self.get_behavior_loss(observation, policy_output, next_observation)\n",
    "\n",
    "    self.training_history[\"critic_loss\"].append(critic_loss.item())\n",
    "    self.training_history[\"actor_loss\"].append(actor_loss.item())\n",
    "    self.training_history['hyper_actor_loss'].append(hyper_actor_loss.item())\n",
    "    self.training_history['behavior_loss'].append(behavior_loss.item())\n",
    "\n",
    "    # Update frozen target models\n",
    "    for param, target_param in zip(self.critic.parameters(), self.critic_target.parameters()):\n",
    "      target_param.data.copy_(self.tau * param.data + (1.0 - self.tau) * target_param.data)\n",
    "\n",
    "    for param, target_param in zip(self.actor.parameters(), self.actor_target.parameters()):\n",
    "      target_param.data.copy_(self.tau * param.data + (1.0 - self.tau) * target_param.data)\n",
    "\n",
    "    return {\"step_loss\": (self.training_history['actor_loss'][-1],\n",
    "                          self.training_history['critic_loss'][-1],\n",
    "                          self.training_history['hyper_actor_loss'][-1],\n",
    "                          self.training_history['behavior_loss'][-1])}\n",
    "\n",
    "  def get_hac_loss(self, observation, policy_output, reward, done_mask, next_observation,\n",
    "                    do_actor_update = True, do_critic_update = True):\n",
    "\n",
    "\n",
    "    # nsw reward\n",
    "    cummulative_r = reward\n",
    "    min_r = observation['min_reward']\n",
    "    min_r = torch.where(torch.isinf(min_r), torch.zeros_like(min_r), min_r)\n",
    "      \n",
    "    # Current Q estimate\n",
    "    hyper_output = self.facade.infer_hyper_action(observation, policy_output, self.actor)\n",
    "    current_critic_output = self.facade.apply_critic(observation, hyper_output, self.critic)\n",
    "    current_Q = current_critic_output['q']\n",
    "\n",
    "    # Compute target Q value\n",
    "    next_policy_output = self.facade.apply_policy(next_observation, self.actor_target)\n",
    "    target_critic_output = self.facade.apply_critic(next_observation, next_policy_output, self.critic_target)\n",
    "\n",
    "    target_Q = target_critic_output['q']\n",
    "    target_Q = reward + self.gamma * (done_mask * target_Q).detach()\n",
    "\n",
    "    assert not torch.isnan(current_Q).any(), \"NaN in current_Q!\"\n",
    "    assert not torch.isnan(target_Q).any(), \"NaN in target_Q!\"\n",
    "    assert not torch.isnan(reward).any(), \"NaN in reward!\"\n",
    "\n",
    "    critic_loss = F.mse_loss(current_Q, target_Q).mean()\n",
    "    if do_critic_update and self.critic_lr > 0:\n",
    "      self.critic_optimizer.zero_grad()\n",
    "      critic_loss.backward()\n",
    "      self.critic_optimizer.step()\n",
    "\n",
    "    # actor loss\n",
    "\n",
    "    if do_actor_update and self.actor_lr > 0:\n",
    "      self.actor_optimizer.zero_grad()\n",
    "      policy_output = self.facade.apply_policy(observation, self.actor)\n",
    "      critic_output = self.facade.apply_critic(observation, policy_output, self.critic)\n",
    "      actor_loss = -nsw(critic_output['q'], min_r).mean()\n",
    "      actor_loss.backward()\n",
    "      self.actor_optimizer.step()\n",
    "\n",
    "    # hyper actor loss\n",
    "\n",
    "    if do_actor_update and self.hyper_actor_coef > 0:\n",
    "      self.actor_optimizer.zero_grad()\n",
    "      policy_output = self.facade.apply_policy(observation, self.actor)\n",
    "      inferred_hyper_output = self.facade.infer_hyper_action(observation, policy_output, self.actor)\n",
    "      hyper_actor_loss = self.hyper_actor_coef * F.mse_loss(inferred_hyper_output['Z'],\n",
    "                                                            policy_output['Z']).mean()\n",
    "\n",
    "      hyper_actor_loss.backward()\n",
    "      self.actor_optimizer.step()\n",
    "\n",
    "    return critic_loss, actor_loss, hyper_actor_loss\n",
    "\n",
    "  def get_behavior_loss(self, observation, policy_output, next_observation, do_update = True):\n",
    "    observation, exposure, feedback = self.facade.extract_behavior_data(observation, policy_output, next_observation)\n",
    "    observation['candidate_ids'] = exposure['ids']\n",
    "    observation['candidate_features'] = exposure['features']\n",
    "    policy_output = self.facade.apply_policy(observation, self.actor, do_softmax=False)\n",
    "    action_prob = torch.sigmoid(policy_output['candidate_prob'])\n",
    "    behavior_loss = F.binary_cross_entropy(action_prob, feedback)\n",
    "\n",
    "    if do_update and self.behavior_lr > 0:\n",
    "      self.actor_behavior_optimizer.zero_grad()\n",
    "      behavior_loss.backward()\n",
    "      self.actor_behavior_optimizer.step()\n",
    "\n",
    "    return behavior_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5840bea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T12:48:40.559587Z",
     "iopub.status.busy": "2025-07-10T12:48:40.559021Z",
     "iopub.status.idle": "2025-07-10T14:14:56.970319Z",
     "shell.execute_reply": "2025-07-10T14:14:56.969458Z"
    },
    "papermill": {
     "duration": 5178.254804,
     "end_time": "2025-07-10T14:14:58.522015",
     "exception": false,
     "start_time": "2025-07-10T12:48:40.267211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33m23020082\u001b[0m (\u001b[33m23020082-uet\u001b[0m) to \u001b[32mhttps://api.wandb.ai\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.6\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250710_124840-6vojxq4t\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdeft-flower-78\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC/runs/6vojxq4t\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Load item meta data\n",
      "Run procedure before training\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/1962072114.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  checkpoint = torch.load(params['model_path'] + \".checkpoint\", map_location=device)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total 63 prepare steps\n",
      "Start training\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 50000/50000 [1:26:02<00:00,  9.69it/s]\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           actor_loss █▆▅▅▂▁▁▂▁▂▂▃▁▂▂▃▂▃▃▂▃▂▃▃▂▃▄▃▃▃▃▃▃▂▃▂▃▃▃▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       average_n_step ▁▁▆▆▆▄▇█▆▅▄▇▆▇▅▆▆▆█▇▆▆▆▆▇▇▆▇▆▇▇▆▅▆▅▇▅▆▅▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: average_total_reward ▁▁▁▄▆▆▅▅▆▅▇▆▃▆█▇▇▆▇▄▆█▆▆▇▇▆▇▅▇▇▅▆▅▇▆▄▆▄▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        behavior_loss █▅▃▂▂▂▂▂▁▁▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▂▁▂▁▁▁▁▂▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          buffer_size ▁▇▇█████████████████████████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          critic_loss █▅▅▅▅▄▄▅▃▄▄▃▅▄▃▃▄▃▃▁▄▂▃▂▄▅▃▃▁▃▂▂▄▂▃▄▂▃▂▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     hyper_actor_loss █▇▇▆▆▇▇▇▆▆▆▆▆▅▄▄▄▄▄▃▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           max_n_step ▁████▆██████████████▇██▇██▇███▇█▇███████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     max_total_reward ▁███████████████████████▁███████████▁███\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           min_n_step ▂▃▂▂▃▂▇▇▂▂▂▃▂▅▂▂▂▂█▂▆▂▂▂▂▂▂▂▂▂▂▇▂▇▂▁▂▁▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     min_total_reward ▁▂▂▁▂▆▃▃▃▂▂▆▂▂▂▂▂▁▁▂▂▃▂▃▂▂▂▅▆▂▁▂▁▁█▂▁▁▁▃\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      reward_variance ▁▁▄▃▄▃▄▃▃▁▁▂▃▃▆▁▂▅▅▄▅▆▄▃▄▅▄▄▆▅▆▅▆▄▄▆▅▃▁█\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           actor_loss 0.64489\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       average_n_step 16.8\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: average_total_reward 16.51889\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        behavior_loss 0.03498\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          buffer_size 100000\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          critic_loss 0.05185\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     hyper_actor_loss 0.00747\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           max_n_step 20\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     max_total_reward 20\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           min_n_step 14\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     min_total_reward 13.38889\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      reward_variance 3.64133\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run \u001b[33mdeft-flower-78\u001b[0m at: \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC/runs/6vojxq4t\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at: \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Find logs at: \u001b[35m\u001b[1m./wandb/run-20250710_124840-6vojxq4t/logs\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "params['n_worker'] = 4\n",
    "params['max_seq_len'] = 50\n",
    "\n",
    "params['loss_type'] = 'bce'\n",
    "params['device'] = device\n",
    "params['l2_coef'] = 0.001\n",
    "params['lr'] = 0.0003\n",
    "params['feature_dim'] = 16\n",
    "params['hidden_dims'] = [256]\n",
    "params['attn_n_head'] = 2\n",
    "params['batch_size'] = 128\n",
    "params['epoch'] = 2\n",
    "params['dropout_rate'] = 0.2\n",
    "params['max_step'] = 20\n",
    "params['initial_temper'] = 20\n",
    "params['reward_function'] = mean_with_cost\n",
    "params['sasrec_n_layer'] = 2\n",
    "params['sasrec_d_model'] = 32\n",
    "params['sasrec_n_head'] = 4\n",
    "params['sasrec_dropout'] = 0.1\n",
    "params['sasrec_d_forward'] = 64\n",
    "params['critic_hidden_dims'] = [256, 64]\n",
    "params['critic_dropout_rate'] = 0.2\n",
    "params['n_iter']= [50000]\n",
    "params['slate_size'] = 9\n",
    "params['noise_var'] = 0.1\n",
    "params['q_laplace_smoothness'] = 0.5\n",
    "params['topk_rate'] = 1\n",
    "params['empty_start_rate'] = 0\n",
    "params['buffer_size'] = 100000\n",
    "params['start_timestamp'] = 2000\n",
    "params['gamma'] = 0.9\n",
    "params['train_every_n_step']= 1\n",
    "params['initial_greedy_epsilon'] = 0\n",
    "params['final_greedy_epsilon'] = 0\n",
    "params['elbow_greedy'] = 0.1\n",
    "params['check_episode'] = 10\n",
    "params['with_eval'] = False\n",
    "\n",
    "params['episode_batch_size'] = 32\n",
    "params['batch_size'] = 64\n",
    "params['actor_lr'] = 0.00001\n",
    "params['critic_lr'] = 0.001\n",
    "params['actor_decay'] = 0.00001\n",
    "params['critic_decay'] = 0.00001\n",
    "params['target_mitigate_coef'] = 0.01\n",
    "params['behavior_lr'] = 0.00005\n",
    "params['behavior_decay'] = 0.00001\n",
    "params['hyper_actor_coef'] = 0.1\n",
    "params['advantage_bias'] = 0\n",
    "params['entropy_coef'] = 0.0001\n",
    "\n",
    "config = params.copy()\n",
    "config.pop(\"train\", None)\n",
    "config.pop(\"val\", None)\n",
    "config.pop(\"item_meta\", None)\n",
    "config.pop(\"user_meta\", None)\n",
    "\n",
    "for seed in [9]:\n",
    "    run = wandb.init(\n",
    "    # Set the wandb entity where your project will be logged (generally your team name).\n",
    "    entity=\"23020082-uet\",\n",
    "    # Set the wandb project where this run will be logged.\n",
    "    project=\"HAC\",\n",
    "    # Track hyperparameters and run metadata.\n",
    "    config=config\n",
    "    )\n",
    "    params['seed'] = seed\n",
    "    set_random_seed(params['seed'])\n",
    "    params['save_path'] = os.path.join(path_to_output, f\"agent/rl4rs_model_seed{params['seed']}\")\n",
    "    os.makedirs(os.path.dirname(params['save_path']), exist_ok=True)\n",
    "    \n",
    "    env = RL4RSEnvironment(params)\n",
    "    \n",
    "    policy = SASRec(env, params)\n",
    "    policy.to(device)\n",
    "    \n",
    "    \n",
    "    critic = GeneralCritic(policy, params)\n",
    "    critic.to(device)\n",
    "    \n",
    "    facade = OneStageFacade_HyperAction(env, policy, critic, params)\n",
    "    \n",
    "    agent = HAC(facade, params)\n",
    "    \n",
    "    agent.train()\n",
    "    run.finish()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4a7e654",
   "metadata": {
    "papermill": {
     "duration": 1.448381,
     "end_time": "2025-07-10T14:15:01.362093",
     "exception": false,
     "start_time": "2025-07-10T14:14:59.913712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2a5c9e26",
   "metadata": {
    "papermill": {
     "duration": 1.392997,
     "end_time": "2025-07-10T14:15:04.311326",
     "exception": false,
     "start_time": "2025-07-10T14:15:02.918329",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7bc64537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:15:07.386855Z",
     "iopub.status.busy": "2025-07-10T14:15:07.386311Z",
     "iopub.status.idle": "2025-07-10T14:16:01.512296Z",
     "shell.execute_reply": "2025-07-10T14:16:01.511561Z"
    },
    "papermill": {
     "duration": 57.063405,
     "end_time": "2025-07-10T14:16:02.895805",
     "exception": false,
     "start_time": "2025-07-10T14:15:05.832400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>442720</td>\n",
       "      <td>348225</td>\n",
       "      <td>2</td>\n",
       "      <td>29,25,16,106,114,45,213,196,148</td>\n",
       "      <td>1,1,1,1,1,1,1,1,0</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>458306</td>\n",
       "      <td>348226</td>\n",
       "      <td>1</td>\n",
       "      <td>5,6,36,110,61,127,172,239,199</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>458307</td>\n",
       "      <td>348226</td>\n",
       "      <td>2</td>\n",
       "      <td>1,4,26,107,61,79,199,164,235</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>476558</td>\n",
       "      <td>348227</td>\n",
       "      <td>1</td>\n",
       "      <td>26,14,4,79,113,96,235,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>476559</td>\n",
       "      <td>348227</td>\n",
       "      <td>2</td>\n",
       "      <td>4,14,26,61,113,127,212,239,164</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     442720      348225            2  29,25,16,106,114,45,213,196,148   \n",
       "1     458306      348226            1    5,6,36,110,61,127,172,239,199   \n",
       "2     458307      348226            2     1,4,26,107,61,79,199,164,235   \n",
       "3     476558      348227            1    26,14,4,79,113,96,235,199,172   \n",
       "4     476559      348227            2   4,14,26,61,113,127,212,239,164   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,0  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "1  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "2  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "3  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "4  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "1  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "2  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "3  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "4  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "1  -0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...                   1  \n",
       "2  -0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...                   1  \n",
       "3  0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>530551</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>28,32,5,77,130,76,196,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>0</td>\n",
       "      <td>64054,2901,63021,88510,10205,7615,54240,37294,...</td>\n",
       "      <td>1.5653,0.6602,-0.3633,-0.1267,1.8759,-0.856,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>531709</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>30,28,21,77,73,130,235,196,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>0</td>\n",
       "      <td>64054,2901,63021,88510,10205,7615,54240,37294,...</td>\n",
       "      <td>1.5653,2.0783,-0.3633,-0.1426,0.9766,-0.5926,-...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>550062</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>15,36,35,134,128,40,200,219,165</td>\n",
       "      <td>1,1,1,1,1,1,0,1,0</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,38043,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>0.6758,-0.0489,-0.3633,-0.1389,1.8565,-0.0384,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>568391</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>29,30,34,132,81,57,164,192,212</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,50212,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>595031</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2,18,21,60,75,85,167,196,237</td>\n",
       "      <td>1,1,1,1,1,1,0,1,1</td>\n",
       "      <td>28,32,5,77,130,76,196,172,199,28,30,21,130,73,...</td>\n",
       "      <td>64054,50212,93755,88510,10205,7615,54240,37294...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1377,1.5852,-0.9129...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     530551           1            1    28,32,5,77,130,76,196,199,172   \n",
       "1     531709           1            2   30,28,21,77,73,130,235,196,172   \n",
       "2     550062           2            1  15,36,35,134,128,40,200,219,165   \n",
       "3     568391           3            1   29,30,34,132,81,57,164,192,212   \n",
       "4     595031           4            1     2,18,21,60,75,85,167,196,237   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,1                                                  0   \n",
       "1  1,1,1,1,1,1,1,1,1                                                  0   \n",
       "2  1,1,1,1,1,1,0,1,0  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "3  1,1,1,1,1,1,1,1,1  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "4  1,1,1,1,1,1,0,1,1  28,32,5,77,130,76,196,172,199,28,30,21,130,73,...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  64054,2901,63021,88510,10205,7615,54240,37294,...   \n",
       "1  64054,2901,63021,88510,10205,7615,54240,37294,...   \n",
       "2  64054,38043,93755,88510,10205,7615,54240,37294...   \n",
       "3  64054,50212,93755,88510,10205,7615,54240,37294...   \n",
       "4  64054,50212,93755,88510,10205,7615,54240,37294...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,0.6602,-0.3633,-0.1267,1.8759,-0.856,-1...                   1  \n",
       "1  1.5653,2.0783,-0.3633,-0.1426,0.9766,-0.5926,-...                   1  \n",
       "2  0.6758,-0.0489,-0.3633,-0.1389,1.8565,-0.0384,...                   1  \n",
       "3  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1377,1.5852,-0.9129...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(283, 5)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# @title Load data\n",
    "item_info = pd.read_csv(os.path.join(path_to_data, \"item_info.csv\"), sep = \" \")\n",
    "test = pd.read_csv(os.path.join(path_to_data, \"test.csv\"), sep=\"@\")\n",
    "train = pd.read_csv(os.path.join(path_to_data, \"all.csv\"), sep=\"@\")\n",
    "\n",
    "display(test.head())\n",
    "display(train.head())\n",
    "display(item_info.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b11324b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:16:05.856274Z",
     "iopub.status.busy": "2025-07-10T14:16:05.855992Z",
     "iopub.status.idle": "2025-07-10T14:16:05.929389Z",
     "shell.execute_reply": "2025-07-10T14:16:05.928665Z"
    },
    "papermill": {
     "duration": 1.581338,
     "end_time": "2025-07-10T14:16:05.930663",
     "exception": false,
     "start_time": "2025-07-10T14:16:04.349325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>781367.00000</td>\n",
       "      <td>781367.000000</td>\n",
       "      <td>781367.000000</td>\n",
       "      <td>781367.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>440702.54989</td>\n",
       "      <td>214784.801872</td>\n",
       "      <td>1.509714</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>111566.96685</td>\n",
       "      <td>127162.359285</td>\n",
       "      <td>0.644307</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>255612.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>347406.00000</td>\n",
       "      <td>104186.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>440263.00000</td>\n",
       "      <td>211988.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>533090.00000</td>\n",
       "      <td>326244.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>650957.00000</td>\n",
       "      <td>439131.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          timestamp     session_id    sequence_id  behavior_policy_id\n",
       "count  781367.00000  781367.000000  781367.000000            781367.0\n",
       "mean   440702.54989  214784.801872       1.509714                 1.0\n",
       "std    111566.96685  127162.359285       0.644307                 0.0\n",
       "min    255612.00000       1.000000       1.000000                 1.0\n",
       "25%    347406.00000  104186.000000       1.000000                 1.0\n",
       "50%    440263.00000  211988.000000       1.000000                 1.0\n",
       "75%    533090.00000  326244.500000       2.000000                 1.0\n",
       "max    650957.00000  439131.000000       4.000000                 1.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a2a5cd04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:16:08.925950Z",
     "iopub.status.busy": "2025-07-10T14:16:08.925690Z",
     "iopub.status.idle": "2025-07-10T14:16:08.932381Z",
     "shell.execute_reply": "2025-07-10T14:16:08.931662Z"
    },
    "papermill": {
     "duration": 1.553026,
     "end_time": "2025-07-10T14:16:08.933578",
     "exception": false,
     "start_time": "2025-07-10T14:16:07.380552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "params = dict()\n",
    "params['train'] = train\n",
    "params['val'] = test\n",
    "params['item_meta'] = item_info\n",
    "params['n_worker'] = 4\n",
    "params['max_seq_len'] = 50\n",
    "\n",
    "params['loss_type'] = 'bce'\n",
    "params['device'] = device\n",
    "params['l2_coef'] = 0.001\n",
    "params['lr'] = 0.0003\n",
    "params['feature_dim'] = 16\n",
    "params['hidden_dims'] = [256]\n",
    "params['attn_n_head'] = 2\n",
    "params['batch_size'] = 128\n",
    "params['seed'] = 11\n",
    "params['epoch'] = 1\n",
    "params['dropout_rate'] = 0.2\n",
    "params['model_path'] = os.path.join(path_to_output, \n",
    "                          f\"env/rl4rs_user_env_lr{params['lr']}_reg{params['l2_coef']}_eval.model\")\n",
    "set_random_seed(params['seed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6bacbd54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:16:11.870890Z",
     "iopub.status.busy": "2025-07-10T14:16:11.870620Z",
     "iopub.status.idle": "2025-07-10T14:58:55.633603Z",
     "shell.execute_reply": "2025-07-10T14:58:55.632707Z"
    },
    "papermill": {
     "duration": 2565.327651,
     "end_time": "2025-07-10T14:58:55.634764",
     "exception": false,
     "start_time": "2025-07-10T14:16:10.307113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Load item meta data\n",
      "epoch 0 is training\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "781440it [35:47, 363.94it/s]                            \n",
      "156288it [06:56, 375.39it/s]                            \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1 validating; auc: 0.7749\n"
     ]
    }
   ],
   "source": [
    "# @title Train user response\n",
    "reader = RL4RSDataReader(params)\n",
    "model = RL4RSUserResponse(reader, params).to(device)\n",
    "\n",
    "\n",
    "# reader = RL4RSDataReader(params)\n",
    "# model = RL4RSUserResponse(reader, params).to(device)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=params['lr'])\n",
    "model.optimizer = optimizer\n",
    "\n",
    "\n",
    "epo = 0\n",
    "while epo < params['epoch']:\n",
    "  print(f\"epoch {epo} is training\")\n",
    "  epo += 1\n",
    "\n",
    "  model.train()\n",
    "  reader.set_phase(\"train\")\n",
    "  train_loader = DataLoader(reader, params['batch_size'], shuffle = True, pin_memory = True,\n",
    "                            num_workers= params['n_worker'])\n",
    "\n",
    "  t1 = time()\n",
    "  pbar = tqdm(total=len(train_loader.dataset))\n",
    "  step_loss = []\n",
    "  for i, batch_data in enumerate(train_loader):\n",
    "    optimizer.zero_grad()\n",
    "    wrapped_batch = wrap_batch(batch_data, device)\n",
    "\n",
    "    out_dict = model.do_forward_and_loss(wrapped_batch)\n",
    "    loss = out_dict['loss']\n",
    "    loss.backward()\n",
    "    step_loss.append(loss.item())\n",
    "    optimizer.step()\n",
    "    pbar.update(params['batch_size'])\n",
    "    # print(model.loss)\n",
    "    # if (i + 1) % 10 == 0:\n",
    "      # print(f\"Iteration {i + 1}, loss {np.mean(step_loss[-100:])}\")\n",
    "  pbar.close()\n",
    "    # print(\"Epoch {}; time {:.4f}\".format(epo, time() - t1))\n",
    "\n",
    "  # validation\n",
    "  t2 = time()\n",
    "  reader.set_phase(\"val\")\n",
    "  val_loader = DataLoader(reader, params['batch_size'], shuffle = False, pin_memory = False,\n",
    "                          num_workers= params['n_worker'])\n",
    "  valid_probs, valid_true =  [], []\n",
    "  pbar = tqdm(total = len(val_loader.dataset))\n",
    "  with torch.no_grad():\n",
    "    for i, batch_data in enumerate(val_loader):\n",
    "      wrapped_batch = wrap_batch(batch_data, device)\n",
    "      out_dict = model.forward(wrapped_batch)\n",
    "      valid_probs.append(out_dict['probs'].cpu().numpy())\n",
    "      valid_true.append(batch_data['feedback'].cpu().numpy())\n",
    "      pbar.update(params['batch_size'])\n",
    "  pbar.close()\n",
    "  auc = roc_auc_score(np.concatenate(valid_true), np.concatenate(valid_probs))\n",
    "  print(f\"epoch {epo} validating\" + \"; auc: {:.4f}\".format(np.mean(auc)))\n",
    "  model.save_checkpoint()\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0e45e5cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:58:58.953709Z",
     "iopub.status.busy": "2025-07-10T14:58:58.953035Z",
     "iopub.status.idle": "2025-07-10T14:59:10.472851Z",
     "shell.execute_reply": "2025-07-10T14:59:10.472115Z"
    },
    "papermill": {
     "duration": 13.229278,
     "end_time": "2025-07-10T14:59:10.474026",
     "exception": false,
     "start_time": "2025-07-10T14:58:57.244748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>442720</td>\n",
       "      <td>348225</td>\n",
       "      <td>2</td>\n",
       "      <td>29,25,16,106,114,45,213,196,148</td>\n",
       "      <td>1,1,1,1,1,1,1,1,0</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>458306</td>\n",
       "      <td>348226</td>\n",
       "      <td>1</td>\n",
       "      <td>5,6,36,110,61,127,172,239,199</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>458307</td>\n",
       "      <td>348226</td>\n",
       "      <td>2</td>\n",
       "      <td>1,4,26,107,61,79,199,164,235</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>476558</td>\n",
       "      <td>348227</td>\n",
       "      <td>1</td>\n",
       "      <td>26,14,4,79,113,96,235,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>476559</td>\n",
       "      <td>348227</td>\n",
       "      <td>2</td>\n",
       "      <td>4,14,26,61,113,127,212,239,164</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     442720      348225            2  29,25,16,106,114,45,213,196,148   \n",
       "1     458306      348226            1    5,6,36,110,61,127,172,239,199   \n",
       "2     458307      348226            2     1,4,26,107,61,79,199,164,235   \n",
       "3     476558      348227            1    26,14,4,79,113,96,235,199,172   \n",
       "4     476559      348227            2   4,14,26,61,113,127,212,239,164   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,0  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "1  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "2  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "3  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "4  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "1  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "2  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "3  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "4  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "1  -0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...                   1  \n",
       "2  -0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...                   1  \n",
       "3  0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>session_id</th>\n",
       "      <th>sequence_id</th>\n",
       "      <th>exposed_items</th>\n",
       "      <th>user_feedback</th>\n",
       "      <th>user_seqfeature</th>\n",
       "      <th>user_protrait</th>\n",
       "      <th>item_feature</th>\n",
       "      <th>behavior_policy_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>442720</td>\n",
       "      <td>348225</td>\n",
       "      <td>2</td>\n",
       "      <td>29,25,16,106,114,45,213,196,148</td>\n",
       "      <td>1,1,1,1,1,1,1,1,0</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>458306</td>\n",
       "      <td>348226</td>\n",
       "      <td>1</td>\n",
       "      <td>5,6,36,110,61,127,172,239,199</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>458307</td>\n",
       "      <td>348226</td>\n",
       "      <td>2</td>\n",
       "      <td>1,4,26,107,61,79,199,164,235</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>476558</td>\n",
       "      <td>348227</td>\n",
       "      <td>1</td>\n",
       "      <td>26,14,4,79,113,96,235,199,172</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>476559</td>\n",
       "      <td>348227</td>\n",
       "      <td>2</td>\n",
       "      <td>4,14,26,61,113,127,212,239,164</td>\n",
       "      <td>1,1,1,1,1,1,1,1,1</td>\n",
       "      <td>32,28,2,77,126,127,200,199,32,25,35,130,77,127...</td>\n",
       "      <td>92265,58584,6599,16721,6344,7615,54240,11606,7...</td>\n",
       "      <td>-0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp  session_id  sequence_id                    exposed_items  \\\n",
       "0     442720      348225            2  29,25,16,106,114,45,213,196,148   \n",
       "1     458306      348226            1    5,6,36,110,61,127,172,239,199   \n",
       "2     458307      348226            2     1,4,26,107,61,79,199,164,235   \n",
       "3     476558      348227            1    26,14,4,79,113,96,235,199,172   \n",
       "4     476559      348227            2   4,14,26,61,113,127,212,239,164   \n",
       "\n",
       "       user_feedback                                    user_seqfeature  \\\n",
       "0  1,1,1,1,1,1,1,1,0  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "1  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "2  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "3  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "4  1,1,1,1,1,1,1,1,1  32,28,2,77,126,127,200,199,32,25,35,130,77,127...   \n",
       "\n",
       "                                       user_protrait  \\\n",
       "0  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "1  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "2  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "3  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "4  92265,58584,6599,16721,6344,7615,54240,11606,7...   \n",
       "\n",
       "                                        item_feature  behavior_policy_id  \n",
       "0  1.5653,-0.0489,-0.3633,-0.1337,1.7984,-0.4087,...                   1  \n",
       "1  -0.2137,-0.7579,-0.3633,-0.1352,1.3293,-0.7099...                   1  \n",
       "2  -0.2137,-0.0489,-0.3633,-0.1349,1.8061,0.4482,...                   1  \n",
       "3  0.6758,0.3057,-0.3633,-0.143,1.3991,-0.3773,-1...                   1  \n",
       "4  -0.2137,-0.7579,-0.3633,-0.1423,1.7014,-0.2719...                   1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(283, 5)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# @title Load data\n",
    "item_info = pd.read_csv(os.path.join(path_to_data, \"item_info.csv\"), sep = \" \")\n",
    "test = pd.read_csv(os.path.join(path_to_data, \"test.csv\"), sep=\"@\")\n",
    "train = pd.read_csv(os.path.join(path_to_data, \"test.csv\"), sep=\"@\")\n",
    "\n",
    "display(test.head())\n",
    "display(train.head())\n",
    "display(item_info.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b54444f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T14:59:13.717173Z",
     "iopub.status.busy": "2025-07-10T14:59:13.716920Z",
     "iopub.status.idle": "2025-07-10T16:12:42.095931Z",
     "shell.execute_reply": "2025-07-10T16:12:42.095073Z"
    },
    "papermill": {
     "duration": 4410.087437,
     "end_time": "2025-07-10T16:12:42.097111",
     "exception": false,
     "start_time": "2025-07-10T14:59:12.009674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.6\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250710_145913-kjuwiph3\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mchocolate-armadillo-79\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC/runs/kjuwiph3\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Load item meta data\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/1962072114.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  checkpoint = torch.load(params['model_path'] + \".checkpoint\", map_location=device)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start testing\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/768539544.py:137: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  self.critic.load_state_dict(torch.load(self.save_path + \"_critic\", map_location=self.device))\n",
      "/tmp/ipykernel_19/768539544.py:138: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  self.critic_optimizer.load_state_dict(torch.load(self.save_path + \"_critic_optimizer\", map_location=self.device))\n",
      "/tmp/ipykernel_19/768539544.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  self.actor.load_state_dict(torch.load(self.save_path + \"_actor\", map_location=self.device))\n",
      "/tmp/ipykernel_19/768539544.py:142: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  self.actor_optimizer.load_state_dict(torch.load(self.save_path + \"_actor_optimizer\", map_location=self.device))\n",
      "100%|██████████| 50000/50000 [1:13:22<00:00, 11.36it/s]\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       average_n_step ▅▂▅▆▅▅▆▇▅▆▃▄▃▇▂▆▆▃▃▂▁▆▅▃▃▂▇▆▅█▄█▃█▆▅▆▄▅▆\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: average_total_reward ▆▅▅▆▄▄▄▅▅▁▅▅▂▇▅▃▇▆▆▄▅▄█▆▇▅▆▅▃▄█▆▃█▅▆▃▆▆█\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          buffer_size ▁███████████████████████████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           max_n_step █▁██████▁██████▁▁███████████████▁███████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     max_total_reward █████████▁█████▁▁█████▁▁█████████▁██████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           min_n_step ▂▂▂▂▇▃▂▂▂▂▆▂▂█▂▂▂▂▅▁▂▇▂▂▁▂▂▇▂▂▅▇▂▂▂▆▁▂▂▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     min_total_reward ▃▂▁▁▂▁▇▂▂▁▂▁▁▅▅█▂▃▄▂▁▂▄▂▃▃▅▂▇▁▂▅▃▂▁▅▂▁▄▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      reward_variance ▆▆▅▅▂▆▄▄▅▄▄▄▃▃▄▆▄▆▅█▃▅▃▁▂▂▄▅▁▄▅▄▆▁▄▄▄▅▁▆\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       average_n_step 13.8\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: average_total_reward 13.14\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          buffer_size 100000\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           max_n_step 20\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     max_total_reward 20\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           min_n_step 6\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     min_total_reward 4.28889\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      reward_variance 26.44294\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run \u001b[33mchocolate-armadillo-79\u001b[0m at: \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC/runs/kjuwiph3\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at: \u001b[34m\u001b[4mhttps://wandb.ai/23020082-uet/HAC\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Find logs at: \u001b[35m\u001b[1m./wandb/run-20250710_145913-kjuwiph3/logs\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "params['n_worker'] = 4\n",
    "params['max_seq_len'] = 50\n",
    "\n",
    "params['loss_type'] = 'bce'\n",
    "params['device'] = device\n",
    "params['l2_coef'] = 0.001\n",
    "params['lr'] = 0.0003\n",
    "params['feature_dim'] = 16\n",
    "params['hidden_dims'] = [256]\n",
    "params['attn_n_head'] = 2\n",
    "params['batch_size'] = 128\n",
    "params['epoch'] = 2\n",
    "params['dropout_rate'] = 0.2\n",
    "params['max_step'] = 20\n",
    "params['initial_temper'] = 20\n",
    "params['reward_function'] = mean_with_cost\n",
    "params['sasrec_n_layer'] = 2\n",
    "params['sasrec_d_model'] = 32\n",
    "params['sasrec_n_head'] = 4\n",
    "params['sasrec_dropout'] = 0.1\n",
    "params['sasrec_d_forward'] = 64\n",
    "params['critic_hidden_dims'] = [256, 64]\n",
    "params['critic_dropout_rate'] = 0.2\n",
    "params['n_iter']= [50000]\n",
    "params['slate_size'] = 9\n",
    "params['noise_var'] = 0.1\n",
    "params['q_laplace_smoothness'] = 0.5\n",
    "params['topk_rate'] = 1\n",
    "params['empty_start_rate'] = 0\n",
    "params['buffer_size'] = 100000\n",
    "params['start_timestamp'] = 2000\n",
    "params['gamma'] = 0.9\n",
    "params['train_every_n_step']= 1\n",
    "params['initial_greedy_epsilon'] = 0\n",
    "params['final_greedy_epsilon'] = 0\n",
    "params['elbow_greedy'] = 0.1\n",
    "params['check_episode'] = 10\n",
    "params['with_eval'] = False\n",
    "\n",
    "params['episode_batch_size'] = 32\n",
    "params['batch_size'] = 64\n",
    "params['actor_lr'] = 0.00001\n",
    "params['critic_lr'] = 0.001\n",
    "params['actor_decay'] = 0.00001\n",
    "params['critic_decay'] = 0.00001\n",
    "params['target_mitigate_coef'] = 0.01\n",
    "params['behavior_lr'] = 0.00005\n",
    "params['behavior_decay'] = 0.00001\n",
    "params['hyper_actor_coef'] = 0.1\n",
    "params['advantage_bias'] = 0\n",
    "params['entropy_coef'] = 0.0001\n",
    "\n",
    "config = params.copy()\n",
    "config.pop(\"train\", None)\n",
    "config.pop(\"val\", None)\n",
    "config.pop(\"item_meta\", None)\n",
    "config.pop(\"user_meta\", None)\n",
    "\n",
    "for seed in [9]:\n",
    "    run = wandb.init(\n",
    "    # Set the wandb entity where your project will be logged (generally your team name).\n",
    "    entity=\"23020082-uet\",\n",
    "    # Set the wandb project where this run will be logged.\n",
    "    project=\"HAC\",\n",
    "    # Track hyperparameters and run metadata.\n",
    "    config=config\n",
    "    )\n",
    "    params['seed'] = seed\n",
    "    set_random_seed(params['seed'])\n",
    "    params['save_path'] = os.path.join(path_to_output, f\"agent/rl4rs_model_seed{params['seed']}\")\n",
    "    os.makedirs(os.path.dirname(params['save_path']), exist_ok=True)\n",
    "    \n",
    "    env = RL4RSEnvironment(params)\n",
    "    \n",
    "    policy = SASRec(env, params)\n",
    "    policy.to(device)\n",
    "    \n",
    "    \n",
    "    critic = GeneralCritic(policy, params)\n",
    "    critic.to(device)\n",
    "    \n",
    "    facade = OneStageFacade_HyperAction(env, policy, critic, params)\n",
    "    \n",
    "    agent = HAC(facade, params)\n",
    "    \n",
    "    agent.test()\n",
    "    run.finish()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76715db0",
   "metadata": {
    "id": "JhQPZR_yXqHk",
    "outputId": "cce3f497-89a7-415f-da30-173f195aa5ae",
    "papermill": {
     "duration": 2.518043,
     "end_time": "2025-07-10T16:12:47.240596",
     "exception": false,
     "start_time": "2025-07-10T16:12:44.722553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6da2f325",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-10T16:12:52.369912Z",
     "iopub.status.busy": "2025-07-10T16:12:52.369546Z",
     "iopub.status.idle": "2025-07-10T16:12:52.374637Z",
     "shell.execute_reply": "2025-07-10T16:12:52.373870Z"
    },
    "papermill": {
     "duration": 2.636113,
     "end_time": "2025-07-10T16:12:52.375859",
     "exception": false,
     "start_time": "2025-07-10T16:12:49.739746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# # @title Test with environment from Eval User respond\n",
    "# params['seed'] = 12\n",
    "# params['save_path'] = os.path.join(path_to_output, f\"agent/model_seed{params['seed']}\")\n",
    "# env = KREnvironment(params)\n",
    "\n",
    "# policy = SASRec(env, params)\n",
    "# policy.to(device)\n",
    "\n",
    "\n",
    "# critic = GeneralCritic(policy, params)\n",
    "# critic.to(device)\n",
    "\n",
    "# facade = OneStageFacade_HyperAction(env, policy, critic, params)\n",
    "\n",
    "# agent = HAC(facade, params)\n",
    "\n",
    "# agent.test()"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7180976,
     "sourceId": 11467375,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 300659,
     "modelInstanceId": 279738,
     "sourceId": 334090,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16489.185633,
   "end_time": "2025-07-10T16:12:58.252870",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-10T11:38:09.067237",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
